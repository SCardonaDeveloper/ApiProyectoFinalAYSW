@page "/archivoPage"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Linq
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<PageTitle>Archivos</PageTitle>
<h3>Gestión de Productos</h3>
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarArchivos">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}
<h4>Formulario de Archivos</h4>

<EditForm Model="archivoActual" OnValidSubmit="GuardarSegunEstado" FormName="ArchivoForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID</label>
            <InputNumber class="form-control" @bind-Value="archivoActual.Id" />
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">Usuario</label>
            <InputSelect class="form-select" @bind-Value="archivoActual.IdUsuario">
                <option value="0">-- Seleccione --</option>
                @foreach (var u in listaUsuarios)
                {
                    <option value="@u.Id">@u.Email</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label class="form-label">Ruta</label>
            <InputText class="form-control" @bind-Value="archivoActual.Ruta" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="archivoActual.Nombre" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Tipo</label>
            <InputText class="form-control" @bind-Value="archivoActual.Tipo" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Fecha</label>
            <InputDate class="form-control" @bind-Value="archivoActual.Fecha" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarArchivo" disabled="@(!existeArchivo)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarArchivo" disabled="@(!existeArchivo)">Eliminar</button>
    </div>
</EditForm>

<hr />
@if (cargando)
{
    <p><em>Cargando archivos...</em></p>
}
else if (listaArchivos.Count == 0)
{
    <p>No hay archivos disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>ID de usuario</th>
                <th>Ruta</th>
                <th>Nombre</th>
                <th>Tipo</th>
                <th>Fecha</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in listaArchivos)
            {
                <tr>
                    <td>@a.Id</td>
                    <td>@a.IdUsuario</td>
                    <td>@a.Ruta</td>
                    <td>@a.Nombre</td>
                    <td>@a.Tipo</td>
                    <td>@a.Fecha</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                @onclick="@(() => CargarEnFormulario(a))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private Models.Archivo archivoActual {get; set;} = new Models.Archivo();
    private List<Archivo> listaArchivos = new List<Archivo>();
    private const string urlConsultas = "api/consultas/ejecutarconsultaparametrizada";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private string textoBotonGuardar = "Crear";
    private List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private bool existeArchivo = false;
    private bool cargando = false;
    private async Task CargarEnFormulario(Archivo a){

    }
    private async Task CargarArchivos(){

    }
    private async Task GuardarSegunEstado(){

    }
    private async Task BuscarPorCodigo(){

    }
    private async Task ActualizarArchivo(){

    }
    private async Task EliminarArchivo(){

    }
    
    private async Task ProbarConexion()
    {
        LimpiarMensajes();
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProductos");
            
            var parametrosConsulta = new Dictionary<string, object?>
            {
                ["consulta"] = "SELECT COUNT(*) AS total FROM Archivo",
                ["parametros"] = new Dictionary<string, object?>()
            };

            var respuesta = await cliente.PostAsJsonAsync(urlConsultas, parametrosConsulta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API y base de datos verificada correctamente.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "La API respondió pero con error.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private void LimpiarFormulario()
    {
        archivoActual = new Archivo { Fecha = DateTime.Now };
        existeArchivo = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }
    private string ObtenerString(Dictionary<string, object> dict, string key)
    {
        if (!dict.TryGetValue(key, out var valor)) return "";
        
        if (valor is JsonElement elem)
            return elem.ValueKind == JsonValueKind.String ? elem.GetString() ?? "" : elem.ToString();
        
        return valor?.ToString() ?? "";
    }
    private int ObtenerInt(Dictionary<string, object> dict, string key)
    {
        if (!dict.TryGetValue(key, out var valor)) return 0;
        
        if (valor is JsonElement elem)
            return elem.ValueKind == JsonValueKind.Number ? elem.GetInt32() : 0;
        
        return Convert.ToInt32(valor);
    }
    private class UsuarioDTO{
        public int Id {get; set;}
        public string Usuario {get; set;}
        public string Email {get; set;}
    }
}