@page "/archivoPage"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Linq
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<PageTitle>Archivos</PageTitle>
<h3>Gestión de Productos</h3>
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarArchivos">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}
<h4>Formulario de Archivos</h4>

<EditForm Model="archivoActual" OnValidSubmit="GuardarSegunEstado" FormName="ArchivoForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID</label>
            <InputNumber class="form-control" @bind-Value="archivoActual.Id" />
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">Usuario</label>
            <InputSelect class="form-select" @bind-Value="archivoActual.IdUsuario">
                <option value="0">-- Seleccione --</option>
                @foreach (var u in listaUsuarios)
                {
                    <option value="@u.Id">@u.Email</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label class="form-label">Ruta</label>
            <InputText class="form-control" @bind-Value="archivoActual.Ruta" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="archivoActual.Nombre" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Tipo</label>
            <InputText class="form-control" @bind-Value="archivoActual.Tipo" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Fecha</label>
            <InputDate class="form-control" @bind-Value="archivoActual.Fecha" />
        </div>
        <div>
            <InputFile OnChange="SubirArchivo" />
        </div>
        
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary" @onclick="GuardarSegunEstado">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarArchivoPorId">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarArchivo" disabled="@(!existeArchivo)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarArchivo" disabled="@(!existeArchivo)">Eliminar</button>
    </div>
</EditForm>

<hr />
@if (cargando)
{
    <p><em>Cargando archivos...</em></p>
}
else if (listaArchivos.Count == 0)
{
    <p>No hay archivos disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>ID de usuario</th>
                <th>Ruta</th>
                <th>Nombre</th>
                <th>Tipo</th>
                <th>Fecha</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in listaArchivos)
            {
                <tr>
                    <td>@a.Id</td>
                    <td>@a.IdUsuario</td>
                    <td>@a.Ruta</td>
                    <td>@a.Nombre</td>
                    <td>@a.Tipo</td>
                    <td>@a.Fecha</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                @onclick="@(() => CargarEnFormulario(a))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private Models.Archivo archivoActual {get; set;} = new Models.Archivo();
    private List<Archivo> listaArchivos = new List<Archivo>();
    private const string urlConsultas = "api/consultas/ejecutarconsultaparametrizada";
    private const string urlUsuarios = "api/Usuario";
    private const string urlProcedimientos = "api/procedimientos/ejecutarsp";
    private const string urlBaseApi = "api/Archivo";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private string textoBotonGuardar = "Crear";
    private List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private bool existeArchivo = false;
    private bool cargando = false;
    protected override async Task OnInitializedAsync(){
        archivoActual.Fecha = DateTime.Today;
        await CargarDatosIniciales();
    }
    private async Task CargarDatosIniciales(){
        await Task.WhenAll(
            CargarArchivos(),
            CargarUsuarios()
        );
    }
    private async Task CargarEnFormulario(Archivo a){
        archivoActual = a;
        existeArchivo = true;
        mensaje = "";
        claseAviso = "alert alert-info";
        textoBotonGuardar = "Actualizar";
    }
    private async Task CargarArchivos(){
        try 
        { 
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiBack"); 
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Archivo>>>(urlBaseApi); 
            listaArchivos = respuesta?.Datos ?? new List<Archivo>(); 
            mensaje = $"Se cargaron {listaArchivos.Count} archivo(s)."; 
            claseAviso = "alert alert-success"; 
            }catch (Exception error)
            { 
                mensaje = $"Error al listar archivos: {error.Message}"; 
                claseAviso = "alert alert-danger"; 
                } finally 
            { 
                cargando = false; 
        } 
    }
    private async Task BuscarArchivoPorId(){
        LimpiarMensajes();
        if (string.IsNullOrWhiteSpace(archivoActual.Id.ToString()))
        {
            mensaje = "Debe indicar el id para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/id/{archivoActual.Id}";
            var respuestaHttp = await cliente.GetAsync(ruta);

            RespuestaApi<List<Archivo>>? respuesta = null;
            if (respuestaHttp == null)
            {
                respuesta = new RespuestaApi<List<Archivo>> { Datos = new List<Archivo>() };
            }
            if (respuestaHttp != null && respuestaHttp.IsSuccessStatusCode)
            {
                respuesta = await respuestaHttp.Content.ReadFromJsonAsync<RespuestaApi<List<Archivo>>>();
            }
            else if (respuestaHttp != null && respuestaHttp.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                respuesta = new RespuestaApi<List<Archivo>> { Datos = new List<Archivo>() };
            }
            else
            {
                respuesta = null;
            }
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                archivoActual = new Archivo
                {
                    Id = encontrado.Id,
                    IdUsuario = encontrado.IdUsuario,
                    Ruta = encontrado.Ruta, 
                    Nombre = encontrado.Nombre, 
                    Tipo = encontrado.Tipo, 
                    Fecha = encontrado.Fecha

                };
                existeArchivo = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Archivo cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeArchivo = false;
                textoBotonGuardar = "Crear";
                mensaje = "Archivo no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            existeArchivo = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar archivo: {error.Message}";
            claseAviso = "alert alert-danger";
        }

    }
    private async Task CargarUsuarios(){
        try{
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Dictionary<string, object>>>>(urlUsuarios);
            listaUsuarios = respuesta?.Datos?.Select(u => new UsuarioDTO{
                Id = ObtenerInt(u, "Id"),
                Email = ObtenerString(u, "Email")
            }).ToList() ?? new();

        }catch{

        }
    }
    private async Task GuardarSegunEstado(){
        if(existeArchivo)
            await ActualizarArchivo();
        else
            await CrearArchivo();
    }
    private async Task CrearArchivo(){
        LimpiarMensajes();
        try{
            if(archivoActual.IdUsuario <= 0){
                mensaje = "Debe seleccionar usuario. ";
                claseAviso = "alert alert-warning";
                return;
            }
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var parametros = new Dictionary<string, object?>{
                ["nombreSP"] = "crear_archivo", 
                ["IdUsuario"] = archivoActual.IdUsuario, 
                ["Ruta"] = archivoActual.Ruta, 
                ["Nombre"] = archivoActual.Nombre, 
                ["Tipo"] = archivoActual.Tipo, 
                ["Fecha"] = archivoActual.Fecha
            };
            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Archivo creado exitosamenteeee!!!";
                claseAviso = "alert alert-success";
                await CargarArchivos();
                LimpiarFormulario();
            }else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear el archivo {detalle}";
                claseAviso = "alert alert-danger";
            }
        }catch(Exception ex){
            mensaje = $"Error al crear archivo {ex.Message}";
            claseAviso = "alert alert-danger";
        }

    }
    private async Task ActualizarArchivo(){
        LimpiarMensajes();
        try{
            if(archivoActual.Id <= 0){
                mensaje = "Debe indicar el identificador de el archivo. ";
                claseAviso = "alert alert-warning";
                return;
            }
             var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"¿Está seguro de actualizar el archivo #{archivoActual.Id}?\n\n");
            if(!confirmar){
                mensaje = "Actualización canceladaa!. ";
                claseAviso = "alert alert-info";
                return;
            }    
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var parametros = new Dictionary<string, object?>{
                ["nombreSP"] = "sp_Archivo_Actualizar",
                ["IdUsuario"] = archivoActual.IdUsuario, 
                ["Ruta"] = archivoActual.Ruta, 
                ["Nombre"] = archivoActual.Nombre, 
                ["Tipo"] = archivoActual.Tipo, 
                ["Fecha"] = archivoActual.Fecha
            };
            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Archivo actualizado correctamente";
                claseAviso = "alert alert-success";
                await CargarArchivos();
            }else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar {detalle}";
                claseAviso = "alert alert-danger";
            }
        }catch(Exception ex){
            mensaje = $"Error al actualizar eñ archivo {ex.Message}";
            claseAviso = "alert alert-danger";
        }

    }
    private async Task EliminarArchivo(){
        LimpiarMensajes();
        try{
            if(archivoActual.Id <= 0){
                mensaje = "Debe indicar la identificacion del archivo para poder eliminarlo";
                claseAviso = "alert alert-warning";
                return;
            }
            var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"¿Está seguro de eliminar el archivo #{archivoActual.Id}?\n\nEsta acción no se puede deshacer. ");
            if(!confirmar){
                mensaje = "Eliminación canceladaa!. ";
                claseAviso = "alert alert-info";
                return;
            }    
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var parametros = new Dictionary<string, object?>{
                ["nombreSP"] = "sp_Archivo_Eliminar",
                ["Id"] = archivoActual.Id
            };
            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Archivo eliminado correctamenteeee!";
                claseAviso = "alert alert-success";
                await CargarArchivos();
                LimpiarFormulario();
            }else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"❌ Error al eliminar: {detalle}";
                claseAviso = "alert alert-danger";
            }

        }catch (Exception ex)
        {
            mensaje = $"❌ Error al eliminar archivo: {ex.Message}";
            claseAviso = "alert alert-danger";
        }

    }
    
    private async Task ProbarConexion()
    {
        LimpiarMensajes();
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProductos");
            
            var parametrosConsulta = new Dictionary<string, object?>
            {
                ["consulta"] = "SELECT COUNT(*) AS total FROM Archivo",
                ["parametros"] = new Dictionary<string, object?>()
            };

            var respuesta = await cliente.PostAsJsonAsync(urlConsultas, parametrosConsulta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API y base de datos verificada correctamente.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "La API respondió pero con error.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task SubirArchivo(InputFileChangeEventArgs e)
{
    var archivo = e.File;
    var cliente = fabricaHttp.CreateClient("ApiBack");
    var contenido = new MultipartFormDataContent();
    contenido.Add(new StreamContent(archivo.OpenReadStream(10_000_000)), "archivo", archivo.Name);
    var respuesta = await cliente.PostAsync("api/archivos/subir", contenido);
    if (!respuesta.IsSuccessStatusCode)
    {
        mensaje = "Error al subir archivo";
        return;
    }

    var datos = await respuesta.Content.ReadFromJsonAsync<Dictionary<string, string>>();
    var registro = new Dictionary<string, object?>
    {
        ["Nombre"] = datos["nombre"],
        ["Ruta"] = datos["ruta"],
        ["Tipo"] = datos["tipo"],
        ["Fecha"] = DateTime.Now,
        ["IdUsuario"] = datos["IdUsuario"]
    };
    var respuesta2 = await cliente.PostAsJsonAsync("api/Archivo", registro);
    if (respuesta2.IsSuccessStatusCode)
        mensaje = "Archivo registrado exitosamente";
    else
        mensaje = "Archivo subido, pero no se guardó el registro";
}
    private void LimpiarFormulario()
    {
        archivoActual = new Archivo { Fecha = DateTime.Now };
        existeArchivo = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }
    private string ObtenerString(Dictionary<string, object> dict, string key)
    {
        if (!dict.TryGetValue(key, out var valor)) return "";
        
        if (valor is JsonElement elem)
            return elem.ValueKind == JsonValueKind.String ? elem.GetString() ?? "" : elem.ToString();
        
        return valor?.ToString() ?? "";
    }
    private int ObtenerInt(Dictionary<string, object> dict, string key)
    {
        if (!dict.TryGetValue(key, out var valor)) return 0;
        
        if (valor is JsonElement elem)
            return elem.ValueKind == JsonValueKind.Number ? elem.GetInt32() : 0;
        
        return Convert.ToInt32(valor);
    }
    private class UsuarioDTO{
        public int Id {get; set;}
        public string Email {get; set;}
    }
}