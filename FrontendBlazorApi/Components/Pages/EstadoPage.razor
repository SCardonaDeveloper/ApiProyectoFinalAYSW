@page "/EstadoPage"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using System.Runtime.CompilerServices
@inject IHttpClientFactory FabricaHttp
@rendermode InteractiveServer
<PageTitle>Estado</PageTitle>
<h3>Gestion de Estados</h3>
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexi贸n</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarEstado">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}
<h4>Formulario de estados</h4>
<EditForm Model="estadoActual" OnValidSubmit="GuardarSegunEstado" FormName="EstadoForm">
<DataAnnotationsValidator />
<ValidationSummary />    
<div class="row g-3">
<div class="col-md-3">
<label class="form-label">ID</label>
<InputNumber class="form-control" @bind-Value="estadoActual.Id"/>
</div>
<div class="col-md-5">
<label class="form-label">Nombre</label>
<InputText class="form-control" @bind-Value="estadoActual.Nombre"/>
</div>
<div class="col-md-2">
<label class="form-label">Descripcion</label>
<InputText class="form-control" @bind-Value="estadoActual.Descripcion"/>
</div>
</div>
<div class="mt-3 d-flex flex-wrap gap-2">
<button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
<button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
<button type="button" class="btn btn-warning" @onclick="EliminarEstado" disabled="@(!existeEstado)">Eliminar</button>
</div>
</EditForm>

@if (estados is null)
{
    <p><em>Cargando estados...</em></p>
}
else if (!estados.Any())
{
    <p>No se encontraron estados.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Descripcion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in estados)
            {
                <tr>
                    <td>@e.Id</td>
                    <td>@e.Nombre</td>
                    <td>@e.Descripcion</td>
                    <td>
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(e))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
       private List<Estado>? estados;
       [SupplyParameterFromForm]
       private Estado estadoActual {get;set;} = new();
       private bool existeEstado = false;
       private string textoBotonGuardar = "Crear";
       private string mensaje = "";
       private string claseAviso = "alert alert-info";
       private bool cargando = false;
       private const string urlBaseApi = "api/Estado";
       protected override async Task OnInitializedAsync(){
             try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.Estado>>>("api/Estado");
                estados = respuesta?.Datos ?? new List<Models.Estado>();
}
 catch (Exception error)
        {
            Console.WriteLine($"Error al cargar estados: {error.Message}");
                estados = new List<Models.Estado>();
        }
        await CargarEstado();
       }
    private async Task CargarEstado(){
        try{
            
            cargando = true;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.Estado>>>(urlBaseApi);
            estados = respuesta?.Datos ?? new List<Models.Estado>();
            mensaje = $"Se cargaron {estados.Count} estado(s)";
            claseAviso = "alert alert-success";

        }
        catch(Exception ex){
            mensaje = $"Error al listar los estados: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally{
            cargando = false;
        } 
    }
       private async Task BuscarPorCodigo(){
        LimpiarMensajes();
        if(estadoActual.Id == 0){
            mensaje = "Debe indicar el ID para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{estadoActual.Id}";
            var respuesta =  await cliente.GetFromJsonAsync<RespuestaApi<List<Models.Estado>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();
            if(encontrado is not null){
                    estadoActual = new Models.Estado{
                    Id = encontrado.Id,
                    Nombre = encontrado.Nombre,
                    Descripcion = encontrado.Descripcion
                };
                existeEstado = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Estado cargado en el formulario. ";
                claseAviso = "alert alert-success";
            }
            else{
                existeEstado = false;
                textoBotonGuardar = "Crear";
                mensaje = "Estado no encontrado";
                claseAviso = "alert alert-warning";
            }
        }
        catch(Exception ex){
            existeEstado = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error buscando el estado: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task GuardarSegunEstado(){
        if(existeEstado)
        await ActualizarEstado();
        else
        await CrearEstado();
    }
    private async Task CrearEstado(){
        LimpiarMensajes();
        try{
            estadoActual.Id = 0;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, estadoActual);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Estado creado correctamente";
                claseAviso = "alert alert-success";
                await CargarEstado();
                estadoActual = new Models.Estado();
                existeEstado = false;
                textoBotonGuardar = "Crear";
            }
            else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el estado. Detalle: {detalle}";
                claseAviso = "alert alert-danger";

            }
        }
        catch(Exception ex){
            mensaje = $"Error al crear el estado: {ex.Message}";
            claseAviso = "alert alert-danger";
        }

    }
    private async Task ActualizarEstado(){
        LimpiarMensajes();
        if(estadoActual.Id == 0){
            mensaje = "Debe indicar el ID para actualizar";
            claseAviso = "alert alert-warning";
            return;

        }
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{estadoActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, estadoActual);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Estado actualizado correctamente";
                claseAviso = "alert alert-success";
                await CargarEstado();
                existeEstado = true;
                textoBotonGuardar = "Actualizar";

            }else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el Estado. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch(Exception ex){
            mensaje = $"Error al actualizar el estado: {ex.Message}";
            claseAviso = "alert alert-danger";

        }
    }
    private async Task EliminarEstado(){
        LimpiarMensajes();
        if(estadoActual.Id == 0){
            mensaje = "Debe indicar el ID para eliminar";
            claseAviso = "alert alert-warning";
            return;
        }
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{estadoActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Estado eliminado correctamente!";
                claseAviso = "alert alert-success";
                LimpiarFormulario();
            }
            else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el estado. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch(Exception ex){
            mensaje = $"Error al eliminar el estado: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task ProbarConexion(){
        LimpiarMensajes();
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Conexi贸n con la API verificada!!";
                claseAviso = "alert alert-success";
            }
            else{
                mensaje = $"La api respondi贸 con estado {(int)respuesta.StatusCode}";
                claseAviso = "alert alert-warning";
            }
        }
        catch(Exception ex){
            mensaje = $"Error en la conexi贸n a la API: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private void CargarEnFormulario(Models.Estado es){
            estadoActual = new Models.Estado{
            Id = es.Id,
            Nombre = es.Nombre,
            Descripcion = es.Descripcion
        };
        existeEstado = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Estado seleccionado desde el listado";
        claseAviso = "alert alert-info";
    }
    private void LimpiarMensajes(){
        mensaje = "";
        claseAviso = "alert alert-info";
    }
    private void LimpiarFormulario(){
        estadoActual = new Models.Estado();
        existeEstado = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }

}

