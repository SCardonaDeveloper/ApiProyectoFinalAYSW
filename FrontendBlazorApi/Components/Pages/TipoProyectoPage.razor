@page "/TipoProyectoPage"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory FabricaHttp
@rendermode InteractiveServer

<PageTitle>TipoProyecto</PageTitle>

<h3>Gestión de Tipos de Proyectos</h3>

<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarTipoProyecto">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Tipos de Proyectos</h4>
<EditForm Model="tipoProyectoActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />    

    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID</label>
            <InputNumber class="form-control" @bind-Value="tipoProyectoActual.Id" />
        </div>
        <div class="col-md-5">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="tipoProyectoActual.Nombre" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Descripción</label>
            <InputText class="form-control" @bind-Value="tipoProyectoActual.Descripcion" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarTipoProyecto" disabled="@(!existeTipoProyecto)">Eliminar</button>
    </div>
</EditForm>

@if (tipoProyecto is null)
{
    <p><em>Cargando tipos de proyectos...</em></p>
}
else if (!tipoProyecto.Any())
{
    <p>No se encontraron tipos de proyectos.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tp in tipoProyecto)
            {
                <tr>
                    <td>@tp.Id</td>
                    <td>@tp.Nombre</td>
                    <td>@tp.Descripcion</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(tp))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TipoProyecto>? tipoProyecto;
    private TipoProyecto tipoProyectoActual { get; set; } = new();
    private bool existeTipoProyecto = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/TipoProyecto";

    protected override async Task OnInitializedAsync()
    {
        await CargarTipoProyecto();
    }

    private async Task CargarTipoProyecto()
    {
        try
        {
            cargando = true;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.TipoProyecto>>>(urlBaseApi);
            tipoProyecto = respuesta?.Datos ?? new List<Models.TipoProyecto>();
            mensaje = $"Se cargaron {tipoProyecto.Count} tipo(s) de proyecto(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar tipos de proyecto(s): {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task BuscarPorCodigo()
    {
        LimpiarMensajes();
        if (tipoProyectoActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoProyectoActual.Id}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.TipoProyecto>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                tipoProyectoActual = new Models.TipoProyecto
                {
                    Id = encontrado.Id,
                    Nombre = encontrado.Nombre,
                    Descripcion = encontrado.Descripcion
                };
                existeTipoProyecto = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Tipo de proyecto cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeTipoProyecto = false;
                textoBotonGuardar = "Crear";
                mensaje = "Tipo de proyecto no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeTipoProyecto)
            await ActualizarTipoProyecto();
        else
            await CrearTipoProyecto();
    }

    private async Task CrearTipoProyecto()
    {
        LimpiarMensajes();
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, tipoProyectoActual);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Tipo de proyecto creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTipoProyecto();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarTipoProyecto()
    {
        LimpiarMensajes();
        if (tipoProyectoActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            //
            TipoProyectoTratar tipoProyectoT = new TipoProyectoTratar(){
                Nombre = tipoProyectoActual.Nombre,
                Descripcion = tipoProyectoActual.Descripcion
            };
            var ruta = $"{urlBaseApi}/Id/{tipoProyectoActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, tipoProyectoT);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Tipo de proyecto actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTipoProyecto();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarTipoProyecto()
    {
        LimpiarMensajes();
        if (tipoProyectoActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoProyectoActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Tipo de proyecto eliminado correctamente.";
                claseAviso = "alert alert-success";
                LimpiarFormulario();
                await CargarTipoProyecto();
            }
            else
            {
                mensaje = "No se pudo eliminar.";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        LimpiarMensajes();
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);
            mensaje = respuesta.IsSuccessStatusCode
                ? "Conexión con la API verificada correctamente."
                : $"La API respondió con estado {(int)respuesta.StatusCode}.";
            claseAviso = respuesta.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error en la conexión a la API: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Models.TipoProyecto tp)
    {
        tipoProyectoActual = new Models.TipoProyecto
        {
            Id = tp.Id,
            Nombre = tp.Nombre,
            Descripcion = tp.Descripcion
        };
        existeTipoProyecto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Tipo de proyecto seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        tipoProyectoActual = new Models.TipoProyecto();
        existeTipoProyecto = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}
