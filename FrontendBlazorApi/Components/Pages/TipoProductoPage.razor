@page "/TipoProductoPage"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory FabricaHttp
@rendermode InteractiveServer
<PageTitle>TipoProducto</PageTitle>
<h3>Gestion de tipos de productos</h3>
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarTipoProductos">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}
<h4>Formulario de Producto</h4>
<EditForm Model="tipoProductoActual" OnValidSubmit="GuardarSegunEstado" FormName="TipoProductoForm">
<DataAnnotationsValidator />
<ValidationSummary />    
<div class="row g-3">
<div class="col-md-3">
<label class="form-label">ID</label>
<InputNumber class="form-control" @bind-Value="tipoProductoActual.Id"/>
</div>
<div class="col-md-5">
<label class="form-label">Nombre</label>
<InputText class="form-control" @bind-Value="tipoProductoActual.Nombre"/>
</div>
<div class="col-md-2">
<label class="form-label">Descripcion</label>
<InputText class="form-control" @bind-Value="tipoProductoActual.Descripcion"/>
</div>
</div>
<div class="mt-3 d-flex flex-wrap gap-2">
<button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
<button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
<button type="button" class="btn btn-warning" @onclick="ActualizarTipoProducto" disabled="@(!existeProducto)">Actualizar</button>
<button type="button" class="btn btn-warning" @onclick="EliminarTipoProducto" disabled="@(!existeProducto)">Eliminar</button>
</div>
</EditForm>

@if (tipoProductos is null)
{
    <p><em>Cargando tipos de productos...</em></p>
}
else if (!tipoProductos.Any())
{
    <p>No se encontraron tipos de productos.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Descripcion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in tipoProductos)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Nombre</td>
                    <td>@p.Descripcion</td>
                    <td>
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(p))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
       private List<TipoProducto>? tipoProductos;
       [SupplyParameterFromForm]
       private TipoProducto tipoProductoActual {get;set;} = new();
       private bool existeProducto = false;
       private string textoBotonGuardar = "Crear";
       private string mensaje = "";
       private string claseAviso = "alert alert-info";
       private bool cargando = false;
       private const string urlBaseApi = "api/TipoProducto";
       protected override async Task OnInitializedAsync(){
        await CargarTipoProductos();
       }
       private async Task CargarProductos(){
        try{
            cargando = true;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProducto>>>(urlBaseApi);
            tipoProductos = respuesta?.Datos ?? new List<TipoProducto>();
            mensaje = $"Se cargaron {tipoProductos.Count} tipo de producto(s)";
            claseAviso = "alert alert-success";

        }
        catch(Exception ex){
            mensaje = $"Error al listar el tipo de productos: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally{
            cargando = false;
        } 
       }
       private async Task BuscarPorCodigo(){
        LimpiarMensajes();
        if(string.IsNullOrWhiteSpace(tipoProductoActual.Id)){
            mensaje = "Debe indicar el codigo para buscar.";
            claseAviso = "alert alert-warning"
            return;
        }
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack")
        }
       }

        protected override async Task OnInitializedAsync()
    {
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProducto>>>("api/TipoProducto");
            tipoProductos = respuesta?.Datos ?? new List<TipoProducto>();
}
 catch (Exception error)
        {
            Console.WriteLine($"Error al cargar productos: {error.Message}");
            tipoProductos = new List<TipoProducto>();
        }
        }
        }

