@page "/ActividadPage"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using System.Runtime.CompilerServices
@inject IHttpClientFactory FabricaHttp
@rendermode InteractiveServer
<PageTitle>Actividad</PageTitle>
<h3>Gestion de actividades</h3>
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarTipoProductos">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}
<h4>Formulario de actividades</h4>
<EditForm Model="actividadActual" OnValidSubmit="GuardarSegunEstado" FormName="ActividadForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID</label>
            <InputNumber class="form-control" @bind-Value="actividadActual.Id" />
        </div>
    </div>
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID de Entregable</label>
            <InputSelect class="form-select" @bind-Value="actividadActual.FkIdEntregable">
                <option value="0">-- Seleccione --</option>
                @foreach (var e in listaEntregables)
                {
                    <option value="@e.Id">@e.Titulo (ID: @e.Id)</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-5">
            <label class="form-label">Titulo</label>
            <InputText class="form-control" @bind-Value="actividadActual.Titulo" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Descripcion</label>
            <InputText class="form-control" @bind-Value="actividadActual.Descripcion" />
        </div>
    </div>
    <div class="col-md-3">
        <label class="form-label">Fecha de Inicio</label>
        <InputDate class="form-control" @bind-Value="actividadActual.FechaInicio" />
    </div>
    <div class="col-md-3">
        <label class="form-label">Fecha de fin prevista</label>
        <InputDate class="form-control" @bind-Value="actividadActual.FechaFinPrevista" />
    </div>
    <div class="col-md-3">
        <label class="form-label">Fecha de modificación</label>
        <InputDate class="form-control" @bind-Value="actividadActual.FechaModificacion" readonly />
    </div>
    <div class="col-md-2">
        <label class="form-label">Prioridad</label>
        <InputText class="form-control" @bind-Value="actividadActual.Descripcion" />
    </div>
    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="EliminarTipoProducto"
            disabled="@(!existeTipoProducto)">Eliminar</button>
    </div>
</EditForm>

@if (tipoProductos is null)
{
    <p><em>Cargando tipos de productos...</em></p>
}
else if (!tipoProductos.Any())
{
    <p>No se encontraron tipos de productos.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Descripcion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in tipoProductos)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Nombre</td>
                    <td>@p.Descripcion</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                            @onclick="@(() => CargarEnFormulario(p))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TipoProducto>? tipoProductos;
    [SupplyParameterFromForm]
    private TipoProducto tipoProductoActual { get; set; } = new();
    private bool existeTipoProducto = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/TipoProducto";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.TipoProducto>>>("api/TipoProducto");
            tipoProductos = respuesta?.Datos ?? new List<Models.TipoProducto>();
        }
        catch (Exception error)
        {
            Console.WriteLine($"Error al cargar productos: {error.Message}");
            tipoProductos = new List<Models.TipoProducto>();
        }
        await CargarTipoProductos();
    }
    private async Task CargarTipoProductos()
    {
        try
        {

            cargando = true;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.TipoProducto>>>(urlBaseApi);
            tipoProductos = respuesta?.Datos ?? new List<Models.TipoProducto>();
            mensaje = $"Se cargaron {tipoProductos.Count} tipo(s) de producto(s)";
            claseAviso = "alert alert-success";

        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar el tipo de productos: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }
    private async Task BuscarPorCodigo()
    {
        LimpiarMensajes();
        if (tipoProductoActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoProductoActual.Id}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.TipoProducto>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();
            if (encontrado is not null)
            {
                tipoProductoActual = new Models.TipoProducto
                {
                    Id = encontrado.Id,
                    Nombre = encontrado.Nombre,
                    Descripcion = encontrado.Descripcion
                };
                existeTipoProducto = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Tipo de producto cargado en el formulario. ";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeTipoProducto = false;
                textoBotonGuardar = "Crear";
                mensaje = "Tipo de producto no encontrado";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            existeTipoProducto = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error buscando el tipo de producto: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task GuardarSegunEstado()
    {
        if (existeTipoProducto)
            await ActualizarTipoProducto();
        else
            await CrearTipoProducto();
    }
    private async Task CrearTipoProducto()
    {
        LimpiarMensajes();
        try
        {
            tipoProductoActual.Id = 0;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, tipoProductoActual);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "tipo de producto creado correctamente";
                claseAviso = "alert alert-success";
                await CargarTipoProductos();
                tipoProductoActual = new Models.TipoProducto();
                existeTipoProducto = false;
                textoBotonGuardar = "Crear";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el tipo de producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";

            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear el tipo de producto: {ex.Message}";
            claseAviso = "alert alert-danger";
        }

    }
    private async Task ActualizarTipoProducto()
    {
        LimpiarMensajes();
        if (tipoProductoActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para actualizar";
            claseAviso = "alert alert-warning";
            return;

        }
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            //
            TipoProductoTratar tipoProducto = new TipoProductoTratar()
            {
                Nombre = tipoProductoActual.Nombre,
                Descripcion = tipoProductoActual.Descripcion
            };
            var ruta = $"{urlBaseApi}/Id/{tipoProductoActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, tipoProducto);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "tipo de producto actualizado correctamente";
                claseAviso = "alert alert-success";
                await CargarTipoProductos();
                existeTipoProducto = true;
                textoBotonGuardar = "Actualizar";

            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el tipo de producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar el tipo de producto: {ex.Message}";
            claseAviso = "alert alert-danger";

        }
    }
    private async Task EliminarTipoProducto()
    {
        LimpiarMensajes();
        if (tipoProductoActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para eliminar";
            claseAviso = "alert alert-warning";
            return;
        }
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoProductoActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Tipo de producto eliminar correctamente!";
                claseAviso = "alert alert-success";
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el tipo de producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar el tipo del producto: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task ProbarConexion()
    {
        LimpiarMensajes();
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada!!!!1111";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La api respondió con estado {(int)respuesta.StatusCode}";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error en la conexión a la API: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private void CargarEnFormulario(Models.TipoProducto tp)
    {
        tipoProductoActual = new Models.TipoProducto
        {
            Id = tp.Id,
            Nombre = tp.Nombre,
            Descripcion = tp.Descripcion
        };
        existeTipoProducto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Tipo de producto seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }
    private void LimpiarFormulario()
    {
        tipoProductoActual = new Models.TipoProducto();
        existeTipoProducto = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }

}