@page "/UsuariosPage"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory FabricaHttp
@rendermode InteractiveServer

<PageTitle>Usuarios</PageTitle>

<h3>Gestión de Usuarios</h3>

<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarUsuarios">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Usuarios</h4>

<EditForm Model="usuarioActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-2">
            <label class="form-label">ID</label>
            <InputNumber class="form-control" @bind-Value="usuarioActual.Id" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Email</label>
            <InputText class="form-control" @bind-Value="usuarioActual.Email" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Contraseña</label>
            <InputText type="password" class="form-control" @bind-Value="usuarioActual.Contrasena" />
        </div>
        <div class="col-md-3 d-flex align-items-center">
            <div class="form-check mt-4">
                <InputCheckbox class="form-check-input" @bind-Value="usuarioActual.Activo" />
                <label class="form-check-label ms-2">Activo</label>
            </div>
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarUsuario" disabled="@(!existeUsuario)">Eliminar</button>
    </div>
</EditForm>

@if (usuarios is null)
{
    <p><em>Cargando usuarios...</em></p>
}
else if (!usuarios.Any())
{
    <p>No se encontraron usuarios registrados.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Email</th>
                <th>Activo</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in usuarios)
            {
                <tr>
                    <td>@u.Id</td>
                    <td>@u.Email</td>
                    <td>@(u.Activo ? "Sí" : "No")</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(u))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Usuario>? usuarios;
    private Usuario usuarioActual { get; set; } = new();
    private bool existeUsuario = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/Usuario";

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        try
        {
            cargando = true;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.Usuario>>>(urlBaseApi);
            usuarios = respuesta?.Datos ?? new List<Models.Usuario>();
            mensaje = $"Se cargaron {usuarios.Count} usuario(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar usuarios: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task BuscarPorCodigo()
    {
        LimpiarMensajes();
        if (usuarioActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{usuarioActual.Id}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.Usuario>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                usuarioActual = new Models.Usuario
                {
                    Id = encontrado.Id,
                    Email = encontrado.Email,
                    Contrasena = encontrado.Contrasena,
                    Activo = encontrado.Activo
                };
                existeUsuario = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Usuario cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeUsuario = false;
                textoBotonGuardar = "Crear";
                mensaje = "Usuario no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeUsuario)
            await ActualizarUsuario();
        else
            await CrearUsuario();
    }

    private async Task CrearUsuario()
    {
        LimpiarMensajes();
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, usuarioActual);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Usuario creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarUsuarios();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el usuario. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarUsuario()
    {
        LimpiarMensajes();
        if (usuarioActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{usuarioActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, usuarioActual);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Usuario actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarUsuarios();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el usuario. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarUsuario()
    {
        LimpiarMensajes();
        if (usuarioActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{usuarioActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Usuario eliminado correctamente.";
                claseAviso = "alert alert-success";
                LimpiarFormulario();
                await CargarUsuarios();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el usuario. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        LimpiarMensajes();
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada correctamente.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error en la conexión a la API: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Models.Usuario u)
    {
        usuarioActual = new Models.Usuario
        {
            Id = u.Id,
            Email = u.Email,
            Contrasena = u.Contrasena,
            Activo = u.Activo
        };
        existeUsuario = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Usuario seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        usuarioActual = new Models.Usuario();
        existeUsuario = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}
