@page "/ResponsablesPage"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime jsRuntime

<PageTitle>Gestión de Responsables</PageTitle>

<h3 class="mb-3">Gestión de Responsables</h3>

<!-- Agregar sección de datos disponibles -->
<div class="row mb-3">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h6>Tipos de Responsable Disponibles</h6>
            </div>
            <div class="card-body">
                @if (tiposResponsable?.Any() == true)
                {
                    <ul class="list-group">
                        @foreach (var tr in tiposResponsable)
                        {
                            <li class="list-group-item">ID: @tr.Id - @tr.Titulo</li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-warning">No hay tipos de responsable registrados</p>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h6>Usuarios Disponibles</h6>
            </div>
            <div class="card-body">
                @if (usuarios?.Any() == true)
                {
                    <ul class="list-group">
                        @foreach (var u in usuarios)
                        {
                            <li class="list-group-item">ID: @u.Id - @u.</li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-warning">No hay usuarios registrados</p>
                }
            </div>
        </div>
    </div>
</div>

<div class="mb-3 d-flex gap-2">
    <button class="btn btn-outline-primary" @onclick="CargarResponsables">Mostrar Todos</button>
    <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
    <button class="btn btn-outline-info" @onclick="CargarDatosReferencia">Actualizar Listas</button>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso">@mensaje</div>
}

<!-- CAMBIO IMPORTANTE: OnValidSubmit en lugar de OnSubmit -->
<EditForm Model="responsableActual" OnValidSubmit="GuardarSegunEstado" FormName="formResponsable">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-2">
            <label class="form-label fw-bold">ID</label>
            <InputNumber class="form-control" @bind-Value="responsableActual.Id" readonly />
        </div>

        <div class="col-md-3">
            <label class="form-label fw-bold">Tipo Responsable</label>
            <!-- CAMBIO: Usar @bind en lugar de @bind-Value para InputSelect -->
            <InputSelect @bind-Value="responsableActual.IdTipoResponsable" class="form-control">
                <option value="0">Seleccione un tipo</option>
                @foreach (var tr in tiposResponsable)
                {
                    <option value="@tr.Id">@tr.Id - @tr.Titulo</option>
                }
            </InputSelect>
            <small class="form-text text-muted">Valor seleccionado: @responsableActual.IdTipoResponsable</small>
        </div>

        <div class="col-md-3">
            <label class="form-label fw-bold">Usuario</label>
            <!-- CAMBIO: Usar @bind en lugar de @bind-Value para InputSelect -->
            <InputSelect @bind-Value="responsableActual.IdUsuario" class="form-control">
                <option value="0">Seleccione un usuario</option>
                @foreach (var u in usuarios)
                {
                    <option value="@u.Id">@u.Id - @u.Email</option>
                }
            </InputSelect>
            <small class="form-text text-muted">Valor seleccionado: @responsableActual.IdUsuario</small>
        </div>

        <div class="col-md-4">
            <label class="form-label fw-bold">Nombre del Responsable</label>
            <InputText class="form-control" @bind-Value="responsableActual.Nombre" placeholder="Ingrese el nombre completo" />
        </div>
    </div>

    <div class="mt-4 d-flex gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-warning" @onclick="LimpiarFormulario">Limpiar</button>
    </div>
</EditForm>

<hr />

<h4 class="mt-4">Lista de Responsables</h4>

@if (listaResponsables is null)
{
    <p><em>Cargando responsables...</em></p>
}
else if (!listaResponsables.Any())
{
    <p>No hay responsables registrados.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-light">
            <tr>
                <th>ID</th>
                <th>Tipo Responsable</th>
                <th>Usuario</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in listaResponsables)
            {
                <tr>
                    <td>@r.Id</td>
                    <td>@r.IdTipoResponsable</td>
                    <td>@r.IdUsuario</td>
                    <td>@r.Nombre</td>
                    <td>
                        <button class="btn btn-sm btn-success" @onclick="@(() => CargarEnFormulario(r))">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => EliminarResponsable(r.Id))">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Responsables> listaResponsables = new();
    private List<TipoResponsable> tiposResponsable = new();
    private List<Usuario> usuarios = new();
    private Responsables responsableActual = new();
    private bool existeResponsable = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";

    private const string urlConsultas = "api/consultas/ejecutarconsultaparametrizada";
    private const string urlProcedimientos = "api/procedimientos/ejecutarsp";

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosReferencia();
        await CargarResponsables();
    }

    private async Task CargarDatosReferencia()
    {
        await CargarTiposResponsable();
        await CargarUsuarios();
    }

    private async Task CargarTiposResponsable()
    {
        try
        {
            var cliente = HttpClientFactory.CreateClient("ApiBack");
            var parametrosConsulta = new Dictionary<string, object?>
            {
                ["consulta"] = "SELECT * FROM TipoResponsable ORDER BY Id",
                ["parametros"] = new Dictionary<string, object?>()
            };

            var respuesta = await cliente.PostAsJsonAsync(urlConsultas, parametrosConsulta);
            if (respuesta.IsSuccessStatusCode)
            {
                var data = await respuesta.Content.ReadFromJsonAsync<RespuestaConsulta>();
                tiposResponsable = data?.Resultados?.Select(d => new TipoResponsable
                {
                    Id = ObtenerInt(d, "Id"),
                    Titulo = ObtenerString(d, "Titulo"),
                    Descripcion = ObtenerString(d, "Descripcion")
                }).ToList() ?? new();
                
                // DEBUG: Ver qué datos se cargaron
                Console.WriteLine($"Tipos de responsable cargados: {tiposResponsable.Count}");
                foreach (var tr in tiposResponsable)
                {
                    Console.WriteLine($"ID: {tr.Id}, Titulo: {tr.Titulo}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar tipos de responsable: {ex.Message}");
        }
    }

    private async Task CargarUsuarios()
    {
        try
        {
            var cliente = HttpClientFactory.CreateClient("ApiBack");
            var parametrosConsulta = new Dictionary<string, object?>
            {
                ["consulta"] = "SELECT * FROM Usuario ORDER BY Id",
                ["parametros"] = new Dictionary<string, object?>()
            };

            var respuesta = await cliente.PostAsJsonAsync(urlConsultas, parametrosConsulta);
            if (respuesta.IsSuccessStatusCode)
            {
                var data = await respuesta.Content.ReadFromJsonAsync<RespuestaConsulta>();
                usuarios = data?.Resultados?.Select(d => new Usuario
                {
                    Id = ObtenerInt(d, "Id"),
                    Email = ObtenerString(d, "Email")
                }).ToList() ?? new();
                
                // DEBUG: Ver qué datos se cargaron
                Console.WriteLine($"Usuarios cargados: {usuarios.Count}");
                foreach (var u in usuarios)
                {
                    Console.WriteLine($"ID: {u.Id}, Email: {u.Email}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
        }
    }

    private async Task CargarResponsables()
    {
        try
        {
            var cliente = HttpClientFactory.CreateClient("ApiBack");
            var parametrosConsulta = new Dictionary<string, object?>
            {
                ["consulta"] = "SELECT * FROM Responsable ORDER BY Id",
                ["parametros"] = new Dictionary<string, object?>()
            };

            var respuesta = await cliente.PostAsJsonAsync(urlConsultas, parametrosConsulta);
            if (respuesta.IsSuccessStatusCode)
            {
                var data = await respuesta.Content.ReadFromJsonAsync<RespuestaConsulta>();
                listaResponsables = data?.Resultados?.Select(d => new Responsables
                {
                    Id = ObtenerInt(d, "Id"),
                    IdTipoResponsable = ObtenerInt(d, "IdTipoResponsable"),
                    IdUsuario = ObtenerInt(d, "IdUsuario"),
                    Nombre = ObtenerString(d, "Nombre")
                }).ToList() ?? new();
                mensaje = $"Cargado(s) {listaResponsables.Count} responsable(s) exitosamente.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Error al obtener responsables.";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar responsables: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        Console.WriteLine($"DEBUG - Tipo seleccionado: {responsableActual.IdTipoResponsable}");
        Console.WriteLine($"DEBUG - Usuario seleccionado: {responsableActual.IdUsuario}");
        Console.WriteLine($"DEBUG - Nombre: {responsableActual.Nombre}");

        // Validaciones antes de guardar
        if (responsableActual.IdTipoResponsable <= 0)
        {
            mensaje = "Debe seleccionar un tipo de responsable válido.";
            claseAviso = "alert alert-warning";
            StateHasChanged();
            return;
        }

        if (responsableActual.IdUsuario <= 0)
        {
            mensaje = "Debe seleccionar un usuario válido.";
            claseAviso = "alert alert-warning";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrWhiteSpace(responsableActual.Nombre))
        {
            mensaje = "El nombre del responsable es requerido.";
            claseAviso = "alert alert-warning";
            StateHasChanged();
            return;
        }

        if (responsableActual.Id <= 0)
        {
            await CrearResponsable();
        }
        else
        {
            await ActualizarResponsable();
        }
    }

    public class TipoResponsable
    {
        public int Id { get; set; }
        public string Titulo { get; set; } = string.Empty;
        public string Descripcion { get; set; } = string.Empty;
    }

    public class Usuario
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }

    private async Task CrearResponsable()
    {
        try
        {
            var cliente = HttpClientFactory.CreateClient("ApiBack");

            var parametros = new Dictionary<string, object?>
            {
                ["nombreSP"] = "crear_responsable",
                ["IdTipoResponsable"] = responsableActual.IdTipoResponsable,
                ["IdUsuario"] = responsableActual.IdUsuario,
                ["Nombre"] = responsableActual.Nombre
            };

            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear responsable: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        
        StateHasChanged();
    }

    // Los demás métodos se mantienen igual...
    private async Task ActualizarResponsable()
    {
        try
        {
            var cliente = HttpClientFactory.CreateClient("ApiBack");

            var parametros = new Dictionary<string, object?>
            {
                ["nombreSP"] = "actualizar_responsable",
                ["Id"] = responsableActual.Id,
                ["IdTipoResponsable"] = responsableActual.IdTipoResponsable,
                ["IdUsuario"] = responsableActual.IdUsuario,
                ["Nombre"] = responsableActual.Nombre
            };

            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                mensaje = "Error al actualizar responsable.";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        
        StateHasChanged();
    }

    private async Task EliminarResponsable(int id)
    {
        bool confirmar = await jsRuntime.InvokeAsync<bool>("confirm", $"¿Seguro que deseas eliminar el responsable con ID {id}?");
        if (!confirmar) return;

        try
        {
            var cliente = HttpClientFactory.CreateClient("ApiBack");

            var parametros = new Dictionary<string, object?>
            {
                ["nombreSP"] = "eliminar_responsable",
                ["Id"] = id
            };

            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
            }
            else
            {
                mensaje = "Error al eliminar responsable.";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        
        StateHasChanged();
    }

    private void CargarEnFormulario(Responsables r)
    {
        responsableActual = new Responsables
        {
            Id = r.Id,
            IdTipoResponsable = r.IdTipoResponsable,
            IdUsuario = r.IdUsuario,
            Nombre = r.Nombre
        };
        textoBotonGuardar = "Actualizar";
        existeResponsable = true;
        StateHasChanged();
    }

    private void LimpiarFormulario()
    {
        responsableActual = new Responsables();
        textoBotonGuardar = "Crear";
        existeResponsable = false;
        mensaje = "";
        StateHasChanged();
    }

    private int ObtenerInt(Dictionary<string, object> d, string k) =>
        d.TryGetValue(k, out var v) && v is JsonElement e && e.ValueKind == JsonValueKind.Number ? e.GetInt32() : Convert.ToInt32(v ?? 0);

    private string ObtenerString(Dictionary<string, object> d, string k) =>
        d.TryGetValue(k, out var v) ? (v is JsonElement e && e.ValueKind == JsonValueKind.String ? e.GetString() ?? "" : v.ToString() ?? "") : "";

    private class RespuestaConsulta
    {
        [JsonPropertyName("Resultados")]
        public List<Dictionary<string, object>>? Resultados { get; set; }
    }
}