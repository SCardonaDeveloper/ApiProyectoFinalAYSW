@page "/tiporesponsables"

@* 
    Página de gestión de TipoResponsable con CRUDL completo contra la API real.
    - Listar:      GET    /api/tiporesponsable
    - Buscar:      GET    /api/tiporesponsable/{id}
    - Crear:       POST   /api/tiporesponsable
    - Actualizar:  PUT    /api/tiporesponsable/{id}
    - Eliminar:    DELETE /api/tiporesponsable/{id}
*@

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp

<PageTitle>Tipo de Responsable</PageTitle>

<h3>Gestión de Tipos de Responsable</h3>

<div class="mb-3 d-flex gap-2">
    <button class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button class="btn btn-outline-primary" @onclick="CargarTipos">Mostrar todos</button>
    <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario TipoResponsable</h4>

<EditForm Model="tipoActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-2">
            <label class="form-label">Id</label>
            <InputNumber class="form-control" @bind-Value="tipoActual.Id" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Título</label>
            <InputText class="form-control" @bind-Value="tipoActual.Titulo" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Descripción</label>
            <InputText class="form-control" @bind-Value="tipoActual.Descripcion" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarTipo" disabled="@(!existeTipo)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarTipo" disabled="@(!existeTipo)">Eliminar</button>
    </div>
</EditForm>

<hr />

@if (cargando)
{
    <p><em>Cargando tipos...</em></p>
}
else if (listaTipos.Count == 0)
{
    <p>No hay tipos de responsable disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Título</th>
                <th>Descripción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in listaTipos)
            {
                <tr @onclick="@(() => CargarEnFormulario(t))" style="cursor:pointer">
                    <td>@t.Id</td>
                    <td>@t.Titulo</td>
                    <td>@t.Descripcion</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // ---------------------------
    // Estado de la pantalla
    // ---------------------------

    private List<TipoResponsable> listaTipos = new();
    private TipoResponsable tipoActual = new();
    private bool existeTipo = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/tiporesponsable";

    // ---------------------------
    // Ciclo de vida
    // ---------------------------
    protected override async Task OnInitializedAsync()
    {
        await CargarTipos();
    }

    // ---------------------------
    // Acciones CRUDL
    // ---------------------------

    private async Task CargarTipos()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiBack");

            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>(urlBaseApi);
            listaTipos = respuesta?.Datos ?? new();

            mensaje = $"Se cargaron {listaTipos.Count} tipo(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al listar tipos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task BuscarPorId()
    {
        LimpiarMensajes();

        if (tipoActual.Id == 0)
        {
            mensaje = "Debe indicar el Id para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/{tipoActual.Id}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<TipoResponsable>>(ruta);

            if (respuesta?.Datos is not null)
            {
                tipoActual = respuesta.Datos;
                existeTipo = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "TipoResponsable cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeTipo = false;
                textoBotonGuardar = "Crear";
                mensaje = "No se encontró el tipo.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar tipo: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeTipo)
            await ActualizarTipo();
        else
            await CrearTipo();
    }

    private async Task CrearTipo()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, tipoActual);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "TipoResponsable creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTipos();
                tipoActual = new();
                existeTipo = false;
                textoBotonGuardar = "Crear";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear tipo: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarTipo()
    {
        LimpiarMensajes();

        if (tipoActual.Id == 0)
        {
            mensaje = "Debe indicar el Id para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/{tipoActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, tipoActual);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "TipoResponsable actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTipos();
                existeTipo = true;
                textoBotonGuardar = "Actualizar";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar tipo: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarTipo()
    {
        LimpiarMensajes();

        if (tipoActual.Id == 0)
        {
            mensaje = "Debe indicar el Id para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/{tipoActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "TipoResponsable eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTipos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar tipo: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(TipoResponsable t)
    {
        tipoActual = new TipoResponsable
        {
            Id = t.Id,
            Titulo = t.Titulo,
            Descripcion = t.Descripcion
        };
        existeTipo = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "TipoResponsable seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        tipoActual = new TipoResponsable();
        existeTipo = false;
        textoBotonGuardar = "Crear";
    }
}
