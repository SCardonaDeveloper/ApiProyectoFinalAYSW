@page "/TipoResponsablePage"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory FabricaHttp
@rendermode InteractiveServer

<PageTitle>TipoResponsable</PageTitle>

<h3>Gestión de Tipos de Responsable</h3>

<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarTipoResponsables">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Tipos de Responsable</h4>
<EditForm Model="tipoResponsableActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />    

    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID</label>
            <InputNumber class="form-control" @bind-Value="tipoResponsableActual.Id" />
        </div>
        <div class="col-md-5">
            <label class="form-label">Título</label>
            <InputText class="form-control" @bind-Value="tipoResponsableActual.Titulo" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Descripción</label>
            <InputText class="form-control" @bind-Value="tipoResponsableActual.Descripcion" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarTipoResponsable" disabled="@(!existeTipoResponsable)">Eliminar</button>
    </div>
</EditForm>

@if (tipoResponsables is null)
{
    <p><em>Cargando tipos de responsables...</em></p>
}
else if (!tipoResponsables.Any())
{
    <p>No se encontraron tipos de responsables.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Código</th>
                <th>Título</th>
                <th>Descripción</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in tipoResponsables)
            {
                <tr>
                    <td>@r.Id</td>
                    <td>@r.Titulo</td>
                    <td>@r.Descripcion</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(r))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TipoResponsable>? tipoResponsables;
    private TipoResponsable tipoResponsableActual { get; set; } = new();
    private bool existeTipoResponsable = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/TipoResponsable";

    protected override async Task OnInitializedAsync()
    {
        await CargarTipoResponsables();
    }

    private async Task CargarTipoResponsables()
    {
        try
        {
            cargando = true;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.TipoResponsable>>>(urlBaseApi);
            tipoResponsables = respuesta?.Datos ?? new List<Models.TipoResponsable>();
            mensaje = $"Se cargaron {tipoResponsables.Count} tipo(s) de responsable(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar tipo(s) de responsable(s): {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task BuscarPorCodigo()
    {
        LimpiarMensajes();
        if (tipoResponsableActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoResponsableActual.Id}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Models.TipoResponsable>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                tipoResponsableActual = new Models.TipoResponsable
                {
                    Id = encontrado.Id,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion
                };
                existeTipoResponsable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Tipo de responsable cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeTipoResponsable = false;
                textoBotonGuardar = "Crear";
                mensaje = "Tipo de responsable no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeTipoResponsable)
            await ActualizarTipoResponsable();
        else
            await CrearTipoResponsable();
    }

    private async Task CrearTipoResponsable()
    {
        LimpiarMensajes();
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, tipoResponsableActual);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Tipo de responsable creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTipoResponsables();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarTipoResponsable()
    {
        LimpiarMensajes();
        if (tipoResponsableActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            TipoResponsableTratar tipoResponsable = new TipoResponsableTratar(){
                Titulo = tipoResponsableActual.Titulo,
                Descripcion = tipoResponsableActual.Descripcion
            };
            var ruta = $"{urlBaseApi}/Id/{tipoResponsableActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, tipoResponsable);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Tipo de responsable actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTipoResponsables();
                //
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarTipoResponsable()
    {
        LimpiarMensajes();
        if (tipoResponsableActual.Id == 0)
        {
            mensaje = "Debe indicar el ID para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoResponsableActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Tipo de responsable eliminado correctamente.";
                claseAviso = "alert alert-success";
                LimpiarFormulario();
                await CargarTipoResponsables();
            }
            else
            {
                mensaje = "No se pudo eliminar.";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        LimpiarMensajes();
        try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);
            mensaje = respuesta.IsSuccessStatusCode
                ? "Conexión con la API verificada correctamente."
                : $"La API respondió con estado {(int)respuesta.StatusCode}.";
            claseAviso = respuesta.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error en la conexión a la API: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Models.TipoResponsable r)
    {
        tipoResponsableActual = new Models.TipoResponsable
        {
            Id = r.Id,
            Titulo = r.Titulo,
            Descripcion = r.Descripcion
        };
        existeTipoResponsable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Tipo de responsable seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        tipoResponsableActual = new Models.TipoResponsable();
        existeTipoResponsable = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}
