@page "/tiporesponsables"

@* 
    Página de gestión de TipoResponsable con CRUDL completo contra la API real.
    - Listar:      GET    /api/tiporesponsable
    - Buscar:      GET    /api/tiporesponsable/{id}
    - Crear:       POST   /api/tiporesponsable
    - Actualizar:  PUT    /api/tiporesponsable/{id}
    - Eliminar:    DELETE /api/tiporesponsable/{id}
*@

@using System.Net.Http.Json
@using ApiProyectoFinalAYSW.Models
@using FrontendBlazorApi.Models
@inject IHttpClientFactory FabricaHttp

<PageTitle>Tipo de Responsable</PageTitle>

<h3>Gestión de Tipos de Responsable</h3>

<div class="mb-3 d-flex gap-2">
    <button class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button class="btn btn-outline-primary" @onclick="CargarTipos">Mostrar todos</button>
    <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario TipoResponsable</h4>

<EditForm Model="tipoResponsable" OnValidSubmit="GuardarSegunEstado" FormName="TipoResponsableForm">
<DataAnnotationsValidator />
<ValidationSummary />    
<div class="row g-3">
<div class="col-md-3">
<label class="form-label">ID</label>
<InputNumber class="form-control" @bind-Value="tipoResponsable.Id"/>
</div>
<div class="col-md-5">
<label class="form-label">Titulo</label>
<InputText class="form-control" @bind-Value="tipoResponsable.Titulo"/>
</div>
<div class="col-md-2">
<label class="form-label">Descripcion</label>
<InputText class="form-control" @bind-Value="tipoResponsable.Descripcion"/>
</div>
</div>
<div class="mt-3 d-flex flex-wrap gap-2">
<button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
<button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
<button type="button" class="btn btn-warning" @onclick="ActualizarTipos" disabled="@(!existeTipoResponsable)">Actualizar</button>
<button type="button" class="btn btn-warning" @onclick="EliminarTipos" disabled="@(!existeTipoResponsable)">Eliminar</button>
</div>
</EditForm>

@if (TipoResponsable is null)
{
    <p><em>Cargando tipos de responsable...</em></p>
}
else if (!TipoResponsable.Any())
{
    <p>No se encontraron tipos de responsables.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Descripcion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in TipoResponsable)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Titulo</td>
                    <td>@p.Descripcion</td>
                    <td>
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(p))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
       private List<TipoResponsable>? TipoResponsable;
       [SupplyParameterFromForm]
       private TipoResponsable tipoResponsable {get;set;} = new();
       private bool existeTipoResponsable = false;
       private string textoBotonGuardar = "Crear";
       private string mensaje = "";
       private string claseAviso = "alert alert-info";
       private bool cargando = false;
       private const string urlBaseApi = "api/TipoResponsable";
       protected override async Task OnInitializedAsync(){
             try
        {
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>("api/TipoResponsable");
                TipoResponsable = respuesta?.Datos ?? new List<TipoResponsable>();
}
 catch (Exception error)
        {
            Console.WriteLine($"Error al cargar tipos de responsables: {error.Message}");
                TipoResponsable = new List<TipoResponsable>();
        }
        await CargarTipos();
       }
       private async Task CargarTipos(){
        try{
            cargando = true;
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>(urlBaseApi);
                TipoResponsable = respuesta?.Datos ?? new List<TipoResponsable>();
            mensaje = $"Se cargaron {TipoResponsable.Count} tipo de responsable(s)";
            claseAviso = "alert alert-success";

        }
        catch(Exception ex){
            mensaje = $"Error al listar el tipo de responsables: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally{
            cargando = false;
        } 
       }
       private async Task BuscarPorCodigo(){
        LimpiarMensajes();
        if(tipoResponsable.Id == 0){
            mensaje = "Debe indicar el ID para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoResponsable.Id}";
            var respuesta =  await cliente.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();
            if(encontrado is not null){
                    tipoResponsable = new TipoResponsable{
                    Id = encontrado.Id,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion
                };
                existeTipoResponsable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Tipo de producto cargado en el formulario. ";
                claseAviso = "alert alert-success";
            }
            else{
                existeTipoResponsable = false;
                textoBotonGuardar = "Crear";
                mensaje = "Tipo de producto no encontrado";
                claseAviso = "alert alert-warning";
            }
        }
        catch(Exception ex){
            existeTipoResponsable = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error buscando el tipo de responsable: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task GuardarSegunEstado(){
        if(existeTipoResponsable)
        await ActualizarTipos();
        else
        await CrearTipos();
    }
    private async Task CrearTipos(){
        LimpiarMensajes();
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, tipoResponsable);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "tipo de responsable creado correctamente";
                claseAviso = "alert alert-success";
                await CargarTipos();
                    tipoResponsable = new TipoResponsable();
                existeTipoResponsable = false;
                textoBotonGuardar = "Crear";
            }
            else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el tipo de responsable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";

            }
        }
        catch(Exception ex){
            mensaje = $"Error al crear el tipo de responsable: {ex.Message}";
            claseAviso = "alert alert-danger";
        }

    }
    private async Task ActualizarTipos(){
        LimpiarMensajes();
        if(tipoResponsable.Id == 0){
            mensaje = "Debe indicar el ID para actualizar";
            claseAviso = "alert alert-warning";
            return;

        }
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoResponsable.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, tipoResponsable);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "tipo de responsable actualizado correctamente";
                claseAviso = "alert alert-success";
                await CargarTipos();
                existeTipoResponsable = true;
                textoBotonGuardar = "Actualizar";

            }else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el tipo de responsable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch(Exception ex){
            mensaje = $"Error al actualizar el tipo de responsable: {ex.Message}";
            claseAviso = "alert alert-danger";

        }
    }
    private async Task EliminarTipos(){
        LimpiarMensajes();
        if(tipoResponsable.Id == 0){
            mensaje = "Debe indicar el ID para eliminar";
            claseAviso = "alert alert-warning";
            return;
        }
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/Id/{tipoResponsable.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Tipo de responsable eliminar correctamente!";
                claseAviso = "alert alert-success";
                LimpiarFormulario();
            }
            else{
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el tipo de responsable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch(Exception ex){
            mensaje = $"Error al eliminar el tipo del responsable: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task ProbarConexion(){
        LimpiarMensajes();
        try{
            var cliente = FabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);
            if(respuesta.IsSuccessStatusCode){
                mensaje = "Conexión con la API verificada!";
                claseAviso = "alert alert-success";
            }
            else{
                mensaje = $"La api respondió con estado {(int)respuesta.StatusCode}";
                claseAviso = "alert alert-warning";
            }
        }
        catch(Exception ex){
            mensaje = $"Error en la conexión a la API: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private void CargarEnFormulario(TipoResponsable tr){
            tipoResponsable = new TipoResponsable{
            Id = tr.Id,
            Titulo = tr.Titulo,
            Descripcion = tr.Descripcion
        };
        existeTipoResponsable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Producto seleccionado desde el listado";
        claseAviso = "alert alert-info";
    }
    private void LimpiarMensajes(){
        mensaje = "";
        claseAviso = "alert alert-info";
    }
    private void LimpiarFormulario(){
            tipoResponsable = new TipoResponsable();
        existeTipoResponsable = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }


  
        }

