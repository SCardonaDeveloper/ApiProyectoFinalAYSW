@page "/Entregables"

@* 
    DIRECTIVAS DE BLAZOR:
    - @page: Define la ruta URL para acceder a este componente
    - @using: Importa namespaces para usar clases sin escribir el namespace completo
    - @inject: Inyecta servicios registrados en el contenedor de dependencias
    - @rendermode: CRÍTICO - Hace que el componente sea interactivo desde el inicio,
                   sin esto, los botones no funcionan debido al prerendering
*@

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using System.Text.Json.Serialization
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Entregables</PageTitle>

<h3>Gestión de Entregables</h3>

@* ------------- BARRA DE ACCIONES GENERALES ------------- 
    Botones que no están relacionados con el formulario específico
*@
<div class="mb-3 d-flex gap-2">
    @* type="button" evita que estos botones hagan submit del formulario *@
    @* <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button> *@
    <button type="button" class="btn btn-outline-primary" @onclick="CargarEntregables">Cargar entregables</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar formulario</button>
</div>

@* ------------- MENSAJES DE ESTADO ------------- 
    Muestra mensajes de éxito, error o información al entregable
    Se usa renderizado condicional (@if) para mostrar solo cuando hay mensaje
*@
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    @* La clase CSS viene de la variable claseAviso que cambia según el tipo de mensaje *@
    <div class="@claseAviso" role="alert">@mensaje</div>
}

@* ------------- FORMULARIO CRUD ------------- 
    EditForm: Componente de Blazor para formularios con validación
    - Model: El objeto que se vincula al formulario
    - OnValidSubmit: Método que se ejecuta cuando el formulario es válido y se envía
    - FormName: CRÍTICO - Requerido en Blazor Server para identificar formularios únicos
*@
<h4>Formulario de Entregables</h4>

<EditForm Model="entregableActual" OnValidSubmit="GuardarSegunEstado" FormName="EntregableForm">
    @* Componentes de validación automática *@
    <DataAnnotationsValidator /> @* Habilita validación basada en atributos *@
    <ValidationSummary /> @* Muestra resumen de errores de validación *@

    @* Grid responsivo de Bootstrap para organizar los campos *@
    <div class="row g-5">
        <div class="col-md-1">
            <label class="form-label">Id</label>
            @* 
                InputText: Componente de Blazor para campos de texto
                @bind-Value: Vinculación bidireccional (two-way binding)
                - Cuando el entregable escribe, actualiza entregableActual.Codigo
                - Cuando el código cambia por programa, actualiza el campo visual
            *@
            @if (existeEntregable)
            {
                <InputNumber class="form-control" @bind-Value="entregableActual.Id" readonly />
            }
            else
            {
                <InputNumber class="form-control" @bind-Value="entregableActual.Id" />
            }
        </div>

        <div class="col-md-4">
            <label class="form-label">Codigo</label>
            <InputText class="form-control" @bind-Value="entregableActual.Codigo" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Titulo</label>
            <InputText class="form-control" @bind-Value="entregableActual.Titulo" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Descripcion</label>
            <InputText class="form-control" @bind-Value="entregableActual.Descripcion" />
        </div>

        <div class="col-md-3">
            <label class="form-label">FechaInicio</label>
            <InputDate class="form-control" @bind-Value="entregableActual.FechaInicio" />
        </div>

        <div class="col-md-3">
            <label class="form-label">FechaFinPrevista</label>
            <InputDate class="form-control" @bind-Value="entregableActual.FechaFinPrevista" />
        </div>

        <div class="col-md-3">
            <label class="form-label">FechaModificacion</label>
            <InputDate class="form-control" @bind-Value="entregableActual.FechaModificacion" readonly />
        </div>

        <div class="col-md-3">
            <label class="form-label">FechaFinalizacion</label>
            <InputDate class="form-control" @bind-Value="entregableActual.FechaFinalizacion" />
        </div>

    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        @* 
            type="submit": Este botón envía el formulario y ejecuta OnValidSubmit
            El texto cambia dinámicamente entre "Crear" y "Actualizar"
        *@
        <button type="button" class="btn btn-primary" @onclick="GuardarSegunEstado">@textoBotonGuardar</button>

        @* 
            type="button": Botones que NO envían el formulario
            @onclick: Especifica el método C# que se ejecuta al hacer clic
            disabled: Atributo dinámico que habilita/deshabilita según condiciones
        *@
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
        @* <button type="button" class="btn btn-warning" @onclick="ActualizarEntregable"
            disabled="@(!existeEntregable)">Actualizar</button> *@
        <button type="button" class="btn btn-danger" @onclick="EliminarEntregable"
            disabled="@(!existeEntregable)">Eliminar</button>
    </div>
</EditForm>

<hr />

@* ------------- LISTADO (READ/LIST) ------------- 
    Muestra los entregables en una tabla con renderizado condicional
*@

@* Renderizado condicional: muestra diferentes contenidos según el estado *@
@if (cargando)
{
    <p><em>Cargando Entregables...</em></p>
}
else if (listaEntregables.Count == 0)
{
    <p>No hay Entregables disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Código</th>
                <th>Titulo</th>
                <th>Descripcion</th>
                <th>Fecha Inicio</th>
                <th>Fecha Fin Prevista</th>
                <th>Fecha Modificacion</th>
                <th>Fecha Finalizacion</th>
            </tr>
        </thead>
        <tbody>
            @* 
                @foreach: Itera sobre la lista y genera HTML para cada elemento
                Cada entregable (u) se renderiza como una fila
            *@
            @foreach (var e in listaEntregables)
            {
                <tr>
                    @* @ permite usar variables C# dentro de HTML *@
                    <td>@e.Id</td>
                    <td>@e.Codigo</td>
                    <td>@e.Titulo</td>
                    <td>@e.Descripcion</td>
                    <td>@e.FechaInicio</td>
                    <td>@e.FechaFinPrevista</td>
                    <td>@e.FechaModificacion</td>
                    <td>@e.FechaFinalizacion</td>
                    <td>
                        @* 
                            @(() => método(parámetro)): Lambda expression para pasar parámetros
                            Cada botón "sabe" qué entregable cargar en el formulario
                        *@
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(e))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // =============================================================================
    // VARIABLES DE ESTADO DEL COMPONENTE
    // =============================================================================

    // Lista que contiene todos los entregables para mostrar en la tabla
    private List<Entregable> listaEntregables = new();

    // CRÍTICO: [SupplyParameterFromForm]
    // Este atributo le dice a Blazor que esta propiedad se llena desde el formulario
    // Sin esto, el formulario no funciona correctamente en Blazor Server
    [SupplyParameterFromForm]
    private Entregable entregableActual { get; set; } = new();

    // Bandera que indica si el entregable en el formulario ya existe en la base de datos
    // Determina si el botón principal dice "Crear" o "Actualizar"
    private bool existeEntregable = false;

    // Texto dinámico del botón principal
    private string textoBotonGuardar = "Crear";

    // Variables para mostrar mensajes al entregable
    private string mensaje = "";
    private string claseAviso = "alert alert-info"; // Clase CSS Bootstrap para el tipo de mensaje

    // Indicador visual de carga para mejorar UX
    private bool cargando = false;

    // URL base de la API - se complementa con la BaseAddress configurada en Program.cs
    private const string urlBaseApi = "api/Entregable";

    // =============================================================================
    // MÉTODOS DEL CICLO DE VIDA DEL COMPONENTE
    // =============================================================================

    /// <summary>
    /// Se ejecuta automáticamente cuando el componente se inicializa
    /// Es async porque necesita esperar la carga de datos de la API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        entregableActual.FechaInicio = DateTime.Today;
        entregableActual.FechaFinPrevista = DateTime.Today;
        entregableActual.FechaModificacion = DateTime.Today;
        entregableActual.FechaFinalizacion = DateTime.Today;
        await CargarEntregables();
    }

    // =============================================================================
    // OPERACIONES CRUDL (CREATE, READ, UPDATE, DELETE, LIST)
    // =============================================================================

    /// <summary>
    /// LISTAR: Obtiene todos los entregables de la API
    /// HTTP GET /api/entregable
    /// </summary>
    private async Task CargarEntregables()
    {
        try
        {
            // Indica que está cargando para mostrar mensaje al entregable
            cargando = true;

            // Crea un cliente HTTP configurado (ver Program.cs)
            var cliente = fabricaHttp.CreateClient("ApiBack");

            // GetFromJsonAsync: Hace GET y deserializa automáticamente el JSON
            // RespuestaApi<List<entregable>>: Tipo genérico que mapea la estructura de respuesta
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApiEntregable<List<Entregable>>>(urlBaseApi);

            // Operador null-coalescing (??) para manejar respuestas nulas
            listaEntregables = respuesta?.Datos ?? new List<Entregable>();

            // Mensaje de éxito
            mensaje = $"Se cargaron {listaEntregables.Count} entregable(s).";
            claseAviso = "alert alert-success";

        }
        catch (Exception error)
        {
            // Manejo de errores con mensaje para el entregable
            mensaje = $"Error al listar entregables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            // Finally garantiza que siempre se ejecute, incluso si hay error
            cargando = false;
        }
    }

    /// <summary>
    /// BUSCAR: Busca un entregable específico por código
    /// HTTP GET /api/entregable/codigo/{codigo}
    /// </summary>
    private async Task BuscarPorId()
    {
        LimpiarMensajes();

        // Validación de entrada
        if (string.IsNullOrWhiteSpace(entregableActual.Id.ToString()))
        {
            mensaje = "Debe indicar el id para buscar.";
            claseAviso = "alert alert-warning";
            return; // Sale del método sin hacer la consulta
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");

            // Construcción dinámica de la URL con el código
            var ruta = $"{urlBaseApi}/id/{entregableActual.Id}";
            var respuestaHttp = await cliente.GetAsync(ruta);

            RespuestaApiEntregable<List<Entregable>>? respuesta = null;
            // Si la respuesta es nula, inicializa una instancia vacía para evitar errores de referencia nula
            if (respuestaHttp == null)
            {
                respuesta = new RespuestaApiEntregable<List<Entregable>> { Datos = new List<Entregable>() };
            }
            if (respuestaHttp != null && respuestaHttp.IsSuccessStatusCode)
            {
                respuesta = await respuestaHttp.Content.ReadFromJsonAsync<RespuestaApiEntregable<List<Entregable>>>();
            }
            else if (respuestaHttp != null && respuestaHttp.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // Si es 404, simula respuesta vacía para que el flujo continúe normalmente
                respuesta = new RespuestaApiEntregable<List<Entregable>> { Datos = new List<Entregable>() };
            }
            else
            {
                // Otros errores HTTP
                respuesta = null;
            }

            // FirstOrDefault: Toma el primer elemento o null si no hay elementos
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                // ENCONTRADO: Carga los datos en el formulario
                entregableActual = new Entregable
                {
                    Id = encontrado.Id,
                    Codigo = encontrado.Codigo,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion,
                    FechaInicio = encontrado.FechaInicio,
                    FechaFinPrevista = encontrado.FechaFinPrevista,
                    FechaModificacion = DateTime.Today,
                    FechaFinalizacion = encontrado.FechaFinalizacion,

                };
                existeEntregable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Entregable cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                // NO ENCONTRADO: Resetea el estado a "crear"
                existeEntregable = false;
                textoBotonGuardar = "Crear";
                mensaje = "Entregable no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            // Error: Resetea a estado seguro
            existeEntregable = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// LÓGICA INTELIGENTE: Decide si crear o actualizar según el estado
    /// Se ejecuta cuando se envía el formulario (OnValidSubmit)
    /// </summary>
    private async Task GuardarSegunEstado()
    {
        // Validación de fechas
        if (entregableActual.FechaFinPrevista < entregableActual.FechaInicio)
        {
            mensaje = "La Fecha de Fin Prevista no puede ser menor que la Fecha de Inicio.";
            claseAviso = "alert alert-warning";
            return;
        }
        if (entregableActual.FechaFinalizacion < entregableActual.FechaInicio)
        {
            mensaje = "La Fecha de Finalización no puede ser menor que la Fecha de Inicio.";
            claseAviso = "alert alert-warning";
            return;
        }
        if (entregableActual.Titulo == "" || entregableActual.Codigo == "")
        {
            mensaje = "El Código y el Título son obligatorios.";
            claseAviso = "alert alert-warning";
            return;
        }

        // Setea la fecha de modificación antes de guardar
        entregableActual.FechaModificacion = DateTime.Today;

        if (existeEntregable)
            await ActualizarEntregable();
        else
            await CrearEntregable();
    }

    /// <summary>
    /// CREAR: Crea un nuevo entregable
    /// HTTP POST /api/entregable
    /// </summary>
    private async Task CrearEntregable()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");

            entregableTratar entregable = new()
            {
                // Id no se envía porque es autogenerado por la base de datos
                Codigo = entregableActual.Codigo,
                Titulo = entregableActual.Titulo,
                Descripcion = entregableActual.Descripcion,
                FechaInicio = entregableActual.FechaInicio,
                FechaFinPrevista = entregableActual.FechaFinPrevista,
                FechaModificacion = entregableActual.FechaModificacion,
                FechaFinalizacion = entregableActual.FechaFinalizacion

            };

            // PostAsJsonAsync: Serializa el objeto a JSON y hace POST
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, entregable);

            // IsSuccessStatusCode: Verifica códigos HTTP 200-299
            if (respuesta.IsSuccessStatusCode)
            {
                // Limpia completamente el formulario
                LimpiarFormulario();

                mensaje = "Entregable creado correctamente.";
                claseAviso = "alert alert-success";

                // Refresca la lista para mostrar el nuevo entregable
                await CargarEntregables();

@*                 // Limpia el formulario para una nueva creación
                entregableActual = new Entregable();
                existeEntregable = false;
                textoBotonGuardar = "Crear"; *@
            }
            else
            {
                // Error HTTP: Lee el detalle del error
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ACTUALIZAR: Actualiza un entregable existente
    /// HTTP PUT /api/entregable/codigo/{codigo}
    /// </summary>
    private async Task ActualizarEntregable()
    {
        LimpiarMensajes();

        if (string.IsNullOrWhiteSpace(entregableActual.Id.ToString()))
        {
            mensaje = "Debe indicar el id para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");

            entregableTratar entregable = new()
            {
                // Id no se envía porque es autogenerado por la base de datos
                Codigo = entregableActual.Codigo,
                Titulo = entregableActual.Titulo,
                Descripcion = entregableActual.Descripcion,
                FechaInicio = entregableActual.FechaInicio,
                FechaFinPrevista = entregableActual.FechaFinPrevista,
                FechaModificacion = entregableActual.FechaModificacion,
                FechaFinalizacion = entregableActual.FechaFinalizacion

            };

            // PUT requiere el código en la URL y el objeto completo en el body
            var ruta = $"{urlBaseApi}/id/{entregableActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, entregable);

            if (respuesta.IsSuccessStatusCode)
            {

                // Refresca la lista para mostrar los cambios
                await CargarEntregables();

                // Limpia completamente el formulario
                LimpiarFormulario();

                mensaje = "Entregable actualizado correctamente.";
                claseAviso = "alert alert-success";

            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ELIMINAR: Elimina un entregable existente
    /// HTTP DELETE /api/entregable/codigo/{codigo}
    /// </summary>
    private async Task EliminarEntregable()
    {
        LimpiarMensajes();

        if (string.IsNullOrWhiteSpace(entregableActual.Id.ToString()))
        {
            mensaje = "Debe indicar el id para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");

            // DELETE solo necesita el código en la URL
            var ruta = $"{urlBaseApi}/id/{entregableActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {

                // Refresca la lista (ya no aparecerá el entregable eliminado)
                await CargarEntregables();

                // Limpia completamente el formulario
                LimpiarFormulario();

                mensaje = "Entregable eliminado correctamente.";
                claseAviso = "alert alert-success";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // =============================================================================
    // MÉTODOS AUXILIARES Y DE UTILIDAD
    // =============================================================================

    /// <summary>
    /// Prueba la conectividad con la API sin procesar datos
    /// Útil para diagnóstico de problemas de red
    /// </summary>
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");

            // Solo hace GET sin deserializar, para probar conectividad
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Carga un entregable de la tabla en el formulario para edición
    /// Se ejecuta cuando el entregable hace clic en "Cargar" en la tabla
    /// </summary>
    /// <param name="p">El entregable seleccionado de la tabla</param>
    private void CargarEnFormulario(Entregable e)
    {
        // Crea una NUEVA instancia para evitar referencias compartidas
        // Si asignaras directamente (entregableActual = p), cualquier cambio
        // en el formulario modificaría también el objeto en la lista
        entregableActual = new Entregable
        {
            Id = e.Id,
            Codigo = e.Codigo,
            Titulo = e.Titulo,
            Descripcion = e.Descripcion,
            FechaInicio = e.FechaInicio,
            FechaFinPrevista = e.FechaFinPrevista,
            FechaModificacion = DateTime.Today,
            FechaFinalizacion = e.FechaFinalizacion
        };

        // Cambia el estado a "entregable existente"
        existeEntregable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Entregable seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Limpia solo los mensajes de estado, mantiene los datos
    /// </summary>
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Resetea completamente el formulario a estado inicial
    /// </summary>
    private void LimpiarFormulario()
    {
        entregableActual = new Entregable();
        existeEntregable = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();

        // Inicializa las fechas para evitar valores nulos
        entregableActual.FechaInicio = DateTime.Today;
        entregableActual.FechaFinPrevista = DateTime.Today;
        entregableActual.FechaModificacion = DateTime.Today;
        entregableActual.FechaFinalizacion = DateTime.Today;
    }
}