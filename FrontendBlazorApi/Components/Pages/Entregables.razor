@page "/entregables"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Entregables</PageTitle>

<div class="container-fluid py-3">
    <div class="d-flex align-items-center mb-4">
        <i class="bi bi-clipboard-data fs-2 text-primary me-3"></i>
        <h3 class="mb-0">Gestión de Entregables</h3>
    </div>

    <div class="mb-3 d-flex gap-2 flex-wrap">
        <button type="button" class="btn btn-outline-secondary btn-lg shadow-sm" @onclick="ProbarConexion" title="Probar conexión con la API">
            <i class="bi bi-wifi"></i>
        </button>
        <button type="button" class="btn btn-outline-primary btn-lg shadow-sm" @onclick="CargarEntregables" title="Mostrar todos los entregables">
            <i class="bi bi-list-ul"></i>
        </button>
        <button type="button" class="btn btn-outline-dark btn-lg shadow-sm" @onclick="LimpiarFormulario" title="Limpiar formulario">
            <i class="bi bi-eraser"></i>
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(mensaje))
    {
        <div class="@claseAviso shadow-sm" role="alert">
            <i class="bi bi-info-circle me-2"></i>@mensaje
        </div>
    }
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0"><i class="bi bi-clipboard-plus me-2"></i>Formulario de Entregable</h4>
        </div>
        <div class="card-body">
            <EditForm Model="entregableActual" OnValidSubmit="GuardarSegunEstado" FormName="EntregableForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row g-3">
                    <div class="col-md-2">
                        <label class="form-label fw-bold"><i class="bi bi-hash text-primary"></i> Id</label>
                        <InputNumber class="form-control" @bind-Value="entregableActual.Id" readonly="@existeEntregable" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-bold"><i class="bi bi-upc text-primary"></i> Código</label>
                        <InputText class="form-control" @bind-Value="entregableActual.Codigo" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-bold"><i class="bi bi-card-heading text-primary"></i> Título</label>
                        <InputText class="form-control" @bind-Value="entregableActual.Titulo" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold"><i class="bi bi-chat-left-text text-primary"></i> Descripción</label>
                        <InputText class="form-control" @bind-Value="entregableActual.Descripcion" />
                    </div>

                    <div class="col-md-3">
                        <label class="form-label fw-bold"><i class="bi bi-calendar-event text-primary"></i> Fecha Inicio</label>
                        <InputDate class="form-control" @bind-Value="entregableActual.FechaInicio" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-bold"><i class="bi bi-calendar2-check text-primary"></i> Fecha Fin Prevista</label>
                        <InputDate class="form-control" @bind-Value="entregableActual.FechaFinPrevista" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-bold"><i class="bi bi-pencil-square text-primary"></i> Fecha Modificación</label>
                        <InputDate class="form-control" @bind-Value="entregableActual.FechaModificacion" readonly />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-bold"><i class="bi bi-calendar2-x text-primary"></i> Fecha Finalización</label>
                        <InputDate class="form-control" @bind-Value="entregableActual.FechaFinalizacion" />
                    </div>
                </div>

            <hr class="my-4" />
            <h5 class="mb-3"><i class="bi bi-list-task text-primary me-2"></i>Actividades del entregable</h5>

            @if (entregableActual.Actividades is not null && entregableActual.Actividades.Count > 0)
                {
                    @foreach (var a in entregableActual.Actividades)
                        {
                            <div class="row g-2 align-items-end mb-2 p-2 bg-light rounded">
                                <div class="col-md-3">
                                    <label class="form-label fw-bold"><i class="bi bi-card-heading text-primary"></i> Título</label>
                                    <InputText class="form-control" @bind-Value="a.Titulo" />
                                </div>
                            <div class="col-md-3">
                            <label class="form-label fw-bold"><i class="bi bi-chat-left-text text-primary"></i> Descripción</label>
                            <InputText class="form-control" @bind-Value="a.Descripcion" />
                            </div>
                                <div class="col-md-2">
                                    <label class="form-label fw-bold"><i class="bi bi-flag text-primary"></i> Prioridad</label>
                                    <InputNumber class="form-control" @bind-Value="a.Prioridad" />
                                </div>
                            <div class="col-md-2">
                                <label class="form-label fw-bold"><i class="bi bi-percent text-primary"></i> Avance (%)</label>
                                <InputNumber class="form-control" @bind-Value="a.PorcentajeAvance" />
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-danger btn-sm w-100 shadow-sm" @onclick="() => EliminarActividad(a)" title="Quitar esta actividad">
                                <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>No hay actividades. Agregue una para comenzar.
                        </div>
                    }
                    <div class="col-md-2">
                        <button type="button" class="btn btn-success btn-lg mb-3 shadow-sm" @onclick="AgregarActividad" title="Agregar nueva actividad">
                            <i class="bi bi-plus-circle"></i> Agregar Actividad
                    </button>
                </div>
                <hr class="my-4" />
<h5 class="mb-3"><i class="bi bi-paperclip text-primary me-2"></i>Archivos del entregable</h5>

@if (entregableActual.Archivos is not null && entregableActual.Archivos.Count > 0)
{
    @foreach (var ar in entregableActual.Archivos)
    {
        <div class="row g-2 align-items-end mb-2 p-2 bg-light rounded">
            <div class="col-md-5">
                <label class="form-label fw-bold"><i class="bi bi-file-earmark-text text-primary"></i>ID del archivo</label>
                <InputSelect class="form-select" @bind-Value="ar.IdArchivo">
                <option value = "">--- Seleccione ---</option>
                @foreach(var arc in listaArchivos){
                    <option value="@arc.Id">@arc.Id</option>
                }
                </InputSelect>
            </div>
            <div class="col-md-1">
                <button type="button" class="btn btn-danger btn-sm w-100 shadow-sm" 
                        @onclick="() => EliminarArchivo(ar)" 
                        title="Quitar este archivo">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </div>
    }
}
else
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle me-2"></i>No hay archivos. Agregue uno para comenzar.
    </div>
}

<div class="col-md-2">
    <button type="button" class="btn btn-success btn-lg mb-3 shadow-sm" 
            @onclick="AgregarArchivo" 
            title="Agregar nuevo archivo">
        <i class="bi bi-plus-circle"></i> Agregar Archivo
    </button>
</div>
                <div class="mt-3 d-flex flex-wrap gap-2">
                    <button type="submit" class="btn btn-primary btn-lg shadow-sm" title="Guardar entregable">
                        <i class="bi bi-save"></i> @textoBotonGuardar
                    </button>
                    <button type="button" class="btn btn-info btn-lg shadow-sm" @onclick="BuscarPorCodigo" title="Buscar entregable por código">
                        <i class="bi bi-search"></i>
                    </button>
                    <button type="button" class="btn btn-danger btn-lg shadow-sm" @onclick="EliminarEntregable" disabled="@(!existeEntregable)" title="Eliminar entregable">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0"><i class="bi bi-table me-2"></i>Lista de Entregables</h4>
        </div>
        <div class="card-body">
            @if (cargando)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3"><em>Cargando entregables...</em></p>
                </div>
            }
            else if (listaEntregables.Count == 0)
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>No hay entregables disponibles.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="table-primary">
                            <tr>
                                <th><i class="bi bi-hash me-1"></i>ID</th>
                                <th><i class="bi bi-upc me-1"></i>Código</th>
                                <th><i class="bi bi-card-heading me-1"></i>Título</th>
                                <th><i class="bi bi-chat-left-text me-1"></i>Descripción</th>
                                <th><i class="bi bi-calendar me-1"></i>Inicio</th>
                                <th><i class="bi bi-calendar2-check me-1"></i>Fin Prevista</th>
                                <th><i class="bi bi-calendar2-x me-1"></i>Finalización</th>
                                <th><i class="bi bi-list-task me-1"></i>Actividades</th>
                                <th><i class="bi bi-upload me-1"></i>Cargar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var e in listaEntregables)
                            {
                                <tr>
                                    <td class="fw-bold">@e.Id</td>
                                    <td>@e.Codigo</td>
                                    <td>@e.Titulo</td>
                                    <td>@e.Descripcion</td>
                                    <td>@e.FechaInicio.ToShortDateString()</td>
                                    <td>@e.FechaFinPrevista.ToShortDateString()</td>
                                    <td>@e.FechaFinalizacion?.ToShortDateString()</td>
                                    <td>
                                        <span class="badge bg-primary">@(e.Actividades?.Count ?? 0) act.</span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary shadow-sm" @onclick="@(() => CargarEntregableCompleto(e.Id))" title="Cargar entregable en formulario">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private List<Entregable> listaEntregables = new();
    [SupplyParameterFromForm]
    private Entregable entregableActual { get; set; } = new();
    private List<ActividadDTO> listaActividades = new();
    private List<ArchivoDTO> listaArchivos = new();
    private bool existeEntregable = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/Entregable";
    private const string urlArchivos = "api/Archivo";
    private const string urlProcedimientos = "api/procedimientos/ejecutarsp";
    private const string urlConsultas = "api/consultas/ejecutarconsultaparametrizada";
    private const string urlActividades = "api/Actividad";
    protected override async Task OnInitializedAsync()
    {
        entregableActual.FechaInicio = DateTime.Today;
        entregableActual.FechaFinPrevista = DateTime.Today;
        entregableActual.FechaModificacion = DateTime.Today;
        entregableActual.FechaFinalizacion = DateTime.Today;
        CargarDatosIniciales();
    }
    private async Task CargarDatosIniciales(){
        await Task.WhenAll(
            CargarEntregables(),
            CargarActividades(), 
            CargarArchivos()
        );
    }
    private async Task CargarActividades(){
        try{
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Dictionary<string, object>>>>(urlActividades);
            listaActividades = respuesta?.Datos?.Select(a => new ActividadDTO{
                Id = ObtenerInt(a, "Id"),
                Titulo = ObtenerString(a, "Titulo"),
                Prioridad = ObtenerInt(a, "Prioridad")

            }).ToList() ?? new ();
        }catch{ }
    }
    public async Task CargarArchivos(){
        try{
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Dictionary<string, object>>>>(urlArchivos);
            listaArchivos = respuesta?.Datos?.Select(a => new ArchivoDTO{
                Id = ObtenerInt(a, "Id"),
                Nombre = ObtenerString(a, "Nombre"),
                Tipo = ObtenerString(a, "Tipo")

            }).ToList() ?? new ();

        }catch{ }
    }
    private async Task CargarEntregables() 
    { 
        try 
        { 
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiBack"); 
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Entregable>>>(urlBaseApi); 
            listaEntregables = respuesta?.Datos ?? new List<Entregable>(); 
            mensaje = $"Se cargaron {listaEntregables.Count} entregable(s)."; 
            claseAviso = "alert alert-success"; 
            }catch (Exception error)
            { 
                mensaje = $"Error al listar entregables: {error.Message}"; 
                claseAviso = "alert alert-danger"; 
                } finally 
            { 
                cargando = false; 
        } 
    }
    private async Task CargarEntregableCompleto(int idEntregable)
{
    LimpiarMensajes();

    try
    {
        var cliente = fabricaHttp.CreateClient("ApiBack");

        var parametros = new Dictionary<string, object?>
        {
            ["nombreSP"] = "sp_ConsultarEntregablesConDetalles",
            ["IdEntregable"] = idEntregable
        };

        var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);

        if (respuesta.IsSuccessStatusCode)
        {
            var resultado = await respuesta.Content.ReadFromJsonAsync<RespuestaSP>();

            if (resultado?.Resultados != null && resultado.Resultados.Count > 0)
            {
                var primeraFila = resultado.Resultados[0];
                string? jsonEntregable = null;

                if (primeraFila.ContainsKey("Resultado"))
                {
                    jsonEntregable = primeraFila["Resultado"]?.ToString();
                }
                else if (primeraFila.Count > 0)
                {
                    var primerValor = primeraFila.Values.FirstOrDefault();
                    jsonEntregable = primerValor?.ToString();
                }

                if (!string.IsNullOrEmpty(jsonEntregable))
                {
                    var entregableCompleto = JsonSerializer.Deserialize<EntregableCompleto>(
                        jsonEntregable,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    );

                    if (entregableCompleto != null)
                    {
                        entregableActual = new Entregable
                        {
                            Id = entregableCompleto.Id,
                            Codigo = entregableCompleto.Codigo,
                            Titulo = entregableCompleto.Titulo,
                            Descripcion = entregableCompleto.Descripcion,
                            FechaInicio = entregableCompleto.FechaInicio,
                            FechaFinPrevista = entregableCompleto.FechaFinPrevista,
                            FechaModificacion = entregableCompleto.FechaModificacion,
                            FechaFinalizacion = entregableCompleto.FechaFinalizacion,
                            Actividades = entregableCompleto.DetalleActividades?.Select(a => new Actividad
                            {
                                Id = a.Id,
                                Titulo = a.Titulo,
                                Prioridad = a.Prioridad,
                            }).ToList() ?? new(),
                            Archivos = entregableCompleto.DetalleArchivos?.Select(a => new ArchivoEntregable{
                                IdArchivo = a.IdArchivo
                            }).ToList() ?? new()
                        };

                        existeEntregable = true;
                        textoBotonGuardar = "Actualizar";
                        mensaje = $"Entregable #{entregableActual.Codigo} cargado con {entregableActual.Actividades.Count} actividad(es) y con {entregableActual.Archivos.Count} archivo(s).";
                        claseAviso = "alert alert-success";
                    }
                }
            }
            else
            {
                mensaje = "Entregable no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        else
        {
            mensaje = "Error al cargar entregable.";
            claseAviso = "alert alert-danger";
        }
    }
    catch (Exception ex)
    {
        mensaje = $"Error al cargar entregable: {ex.Message}";
        claseAviso = "alert alert-danger";
    }
}
    private async Task BuscarPorId()
    {
        LimpiarMensajes();
        if (string.IsNullOrWhiteSpace(entregableActual.Id.ToString()))
        {
            mensaje = "Debe indicar el id para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var ruta = $"{urlBaseApi}/id/{entregableActual.Id}";
            var respuestaHttp = await cliente.GetAsync(ruta);

            RespuestaApiEntregable<List<Entregable>>? respuesta = null;
            if (respuestaHttp == null)
            {
                respuesta = new RespuestaApiEntregable<List<Entregable>> { Datos = new List<Entregable>() };
            }
            if (respuestaHttp != null && respuestaHttp.IsSuccessStatusCode)
            {
                respuesta = await respuestaHttp.Content.ReadFromJsonAsync<RespuestaApiEntregable<List<Entregable>>>();
            }
            else if (respuestaHttp != null && respuestaHttp.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                respuesta = new RespuestaApiEntregable<List<Entregable>> { Datos = new List<Entregable>() };
            }
            else
            {
                respuesta = null;
            }
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                entregableActual = new Entregable
                {
                    Id = encontrado.Id,
                    Codigo = encontrado.Codigo,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion,
                    FechaInicio = encontrado.FechaInicio,
                    FechaFinPrevista = encontrado.FechaFinPrevista,
                    FechaModificacion = DateTime.Today,
                    FechaFinalizacion = encontrado.FechaFinalizacion,

                };
                existeEntregable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Entregable cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                existeEntregable = false;
                textoBotonGuardar = "Crear";
                mensaje = "Entregable no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            existeEntregable = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task BuscarPorCodigo()
{
    LimpiarMensajes();
    try
    {
        
        var cliente = fabricaHttp.CreateClient("ApiBack");
        var ruta = $"{urlBaseApi}/codigo/{entregableActual.Codigo}";
        var respuestaHttp = await cliente.GetAsync(ruta);

        if (respuestaHttp.IsSuccessStatusCode)
        {
            var respuesta = await respuestaHttp.Content.ReadFromJsonAsync<RespuestaApiEntregable<List<Entregable>>>();
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado != null)
            {
                entregableActual = encontrado;
                StateHasChanged();
                entregableActual.Actividades ??= new List<Actividad>();
                Console.WriteLine($"Actividades encontradas: {encontrado.Actividades?.Count}");
                existeEntregable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = $"Entregable {entregableActual.Codigo} cargado correctamente.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "No se encontró un entregable con ese código.";
                claseAviso = "alert alert-warning";
            }
        }
        else
        {
            mensaje = "Error al consultar el entregable por código.";
            claseAviso = "alert alert-danger";
        }
    }
    catch (Exception ex)
    {
        mensaje = $"Error al buscar entregable: {ex.Message}";
        claseAviso = "alert alert-danger";
    }
}
    private async Task GuardarSegunEstado()
    {
        if (entregableActual.FechaFinPrevista < entregableActual.FechaInicio)
        {
            mensaje = "La Fecha de Fin Prevista no puede ser menor que la Fecha de Inicio.";
            claseAviso = "alert alert-warning";
            return;
        }
        if (entregableActual.FechaFinalizacion < entregableActual.FechaInicio)
        {
            mensaje = "La Fecha de Finalización no puede ser menor que la Fecha de Inicio.";
            claseAviso = "alert alert-warning";
            return;
        }
        if (string.IsNullOrWhiteSpace(entregableActual.Titulo) || string.IsNullOrWhiteSpace(entregableActual.Codigo))
        {
            mensaje = "El Código y el Título son obligatorios.";
            claseAviso = "alert alert-warning";
            return;
        }
        entregableActual.FechaModificacion = DateTime.Today;

        if (existeEntregable)
            await ActualizarEntregable();
        else
            await CrearEntregable();
    }
    private async Task CrearEntregable()
    {
        LimpiarMensajes();

        try
        {
            if (entregableActual.Actividades == null || entregableActual.Actividades.Count == 0)
            {
                mensaje = "Debe agregar al menos una actividad antes de crear el entregable.";
                claseAviso = "alert alert-warning";
                return;
            }
            if (string.IsNullOrWhiteSpace(entregableActual.Codigo))
            {
                mensaje = "Debe indicar el codigo de el entregable";
                claseAviso = "alert alert-warning";
                return;
            }
            if(entregableActual.Actividades.Count == 0 || entregableActual.Actividades == null){
                mensaje = "Debe agregar al menos una actividad";
                claseAviso = "alert alert-warning";
                return;
            }
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var actividadesJson = JsonSerializer.Serialize(
                entregableActual.Actividades.Select(a => new{
                    a.Titulo,
                    a.Descripcion, 
                    a.FechaInicio, 
                    a.FechaFinPrevista, 
                    a.FechaFinalizacion, 
                    a.Prioridad, 
                    a.PorcentajeAvance
                })
            );
            var parametros = new Dictionary<string, object?>{
                ["nombreSP"] = "crear_entregable_con_actividades",
                ["p_codigo"] = entregableActual.Codigo,
                ["p_titulo"] = entregableActual.Titulo,
                ["p_descripcion"] = entregableActual.Descripcion,
                ["p_fechainicio"] = entregableActual.FechaInicio.ToString("yyyy-MM-dd"),
                ["p_fechafinprevista"] = entregableActual.FechaFinPrevista.ToString("yyyy-MM-dd"),
                ["p_fechamodificacion"] = DateTime.Now.ToString("yyyy-MM-dd"),
                ["p_fechafinalizacion"] = entregableActual.FechaFinalizacion?.ToString("yyyy-MM-dd"),
                ["p_actividades"] = actividadesJson
            };
            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);
            if (respuesta.IsSuccessStatusCode)
            {
                LimpiarFormulario();
                mensaje = "Entregable creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarEntregables();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task ActualizarEntregable()
    {
        LimpiarMensajes();
        try
        {
            if (string.IsNullOrWhiteSpace(entregableActual.Codigo))
            {
                mensaje = "Debe indicar el codigo de el entregable";
                claseAviso = "alert alert-warning";
                return;
            }
            if(entregableActual.Actividades.Count == 0){
                mensaje = "Debe agregar al menos una actividad";
                claseAviso = "alert alert-warning";
                return;
            }
            var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"¿Está seguro de actualizar el entregable #{entregableActual.Codigo}?\n\nSe modificarán las actividades");
            if (!confirmar)
            {
                mensaje = "ℹ️ Actualización cancelada.";
                claseAviso = "alert alert-info";
                return;
            }
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var detallesJson = JsonSerializer.Serialize(
                entregableActual.Actividades.Select(a => new{
                    a.Titulo, 
                    a.Descripcion, 
                    a.FechaInicio, 
                    a.FechaFinPrevista,
                    a.FechaFinalizacion, 
                    a.Prioridad,
                    a.PorcentajeAvance

                })
            );
            entregableTratar entregable = new()
            {
                Codigo = entregableActual.Codigo,
                Titulo = entregableActual.Titulo,
                Descripcion = entregableActual.Descripcion,
                FechaInicio = entregableActual.FechaInicio,
                FechaFinPrevista = entregableActual.FechaFinPrevista,
                FechaModificacion = entregableActual.FechaModificacion,
                FechaFinalizacion = entregableActual.FechaFinalizacion

            };
            var parametros = new Dictionary<string, object?>
            {
                ["nombreSP"] = "actualizar_entregable_con_actividades",
                ["p_codigo"] = entregableActual.Codigo,
                ["p_titulo"] = entregableActual.Titulo,
                ["p_descripcion"] = entregableActual.Descripcion,
                ["p_fechainicio"] = entregableActual.FechaInicio.ToString("yyyy-MM-dd"),
                ["p_fechafinprevista"] = entregableActual.FechaFinPrevista.ToString("yyyy-MM-dd"),
                ["p_fechamodificacion"] = DateTime.Now.ToString("yyyy-MM-dd"),
                ["p_fechafinalizacion"] = entregableActual.FechaFinalizacion?.ToString("yyyy-MM-dd"),
                ["p_actividades"] = detallesJson
            };
            var respuesta = await cliente.PutAsJsonAsync(urlProcedimientos, parametros);

            if (respuesta.IsSuccessStatusCode)
            {
                await CargarEntregables();
                mensaje = "Entregable actualizado correctamente.";
                claseAviso = "alert alert-success";

            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private async Task EliminarEntregable()
    {
        LimpiarMensajes();
        try
        {
            if (string.IsNullOrWhiteSpace(entregableActual.Codigo))
            {
                mensaje = "Debe indicar el código del entregable.";
                claseAviso = "alert alert-warning";
                return;
            }
            var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar el entregable #{entregableActual.Codigo}?\n\nEsta acción no se puede deshacer y quitará la utilización de las actividades");
            if(!confirmar){
                mensaje = "eliminación cancelada";
                claseAviso = "alert alert-info";
                return;
            }
            var cliente = fabricaHttp.CreateClient("ApiBack");
            Dictionary<string, object?> parametros = new Dictionary<string, object?>
            {
                ["nombreSP"] = "eliminar_entregable_completo",
                ["IdEntregable"] = entregableActual.Id
            };
            var respuesta = await cliente.PostAsJsonAsync(urlProcedimientos, parametros);

            if (respuesta.IsSuccessStatusCode)
            {
                await CargarEntregables();
                LimpiarFormulario();
                mensaje = "Entregable eliminado correctamente.";
                claseAviso = "alert alert-success";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private void AgregarActividad()
    {
        entregableActual.Actividades ??= new List<Actividad>();

        entregableActual.Actividades.Add(new Actividad
        {
            Id = entregableActual.Actividades.Count + 1,
            FechaInicio = DateTime.Today,
            FechaFinPrevista = DateTime.Today,
            FechaFinalizacion = DateTime.Today,
            FechaModificacion = DateTime.Today,
            Prioridad = 1,
            PorcentajeAvance = 0
        });
 
        mensaje = "Actividad agregada correctamente.";
        claseAviso = "alert alert-success";
    }

    private async Task EliminarActividad(Actividad a)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Eliminar la actividad '{a.Titulo}'?");
        if (!confirmar) return;

        entregableActual.Actividades?.Remove(a);
        mensaje = "Actividad eliminada.";
        claseAviso = "alert alert-info";
    }
    public async Task AgregarArchivo(){
        entregableActual.Archivos.Add(new ArchivoEntregable());
    }
    public async Task EliminarArchivo(ArchivoEntregable AE){
        entregableActual.Archivos.Remove(AE);
    }
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiBack");
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }
    
    private void LimpiarFormulario()
    {
        entregableActual = new Entregable();
        entregableActual.FechaInicio = DateTime.Today;
        entregableActual.FechaFinPrevista = DateTime.Today;
        entregableActual.FechaModificacion = DateTime.Today;
        entregableActual.FechaFinalizacion = DateTime.Today;
        existeEntregable = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
    
    private string ObtenerString(Dictionary<string, object> dict, string key)
    {
        if (!dict.TryGetValue(key, out var valor)) return "";
        
        if (valor is JsonElement elem)
            return elem.ValueKind == JsonValueKind.String ? elem.GetString() ?? "" : elem.ToString();
        
        return valor?.ToString() ?? "";
    }
        private int ObtenerInt(Dictionary<string, object> dict, string key)
    {
        if (!dict.TryGetValue(key, out var valor)) return 0;
        
        if (valor is JsonElement elem)
            return elem.ValueKind == JsonValueKind.Number ? elem.GetInt32() : 0;
        
        return Convert.ToInt32(valor);
    }
    public class Entregable
{
    public int Id { get; set; }
    public string Codigo { get; set; }
    public string Titulo { get; set; } = "";
    public string Descripcion { get; set; } = "";
    public DateTime FechaInicio { get; set; }
    public DateTime FechaFinPrevista { get; set; }
    public DateTime? FechaModificacion { get; set; }
    public DateTime? FechaFinalizacion { get; set; }
    public List<Actividad>? Actividades { get; set; }
    public List<ArchivoEntregable> Archivos {get; set;} = new List<ArchivoEntregable>();
}
private class EntregableCompleto{
    public int Id {get; set;}
    public string Codigo {get; set;}
    public string Titulo {get; set;} = "";
    public string Descripcion {get; set;} = "";
    public DateTime FechaInicio { get; set; }
    public DateTime FechaFinPrevista { get; set; }
    public DateTime? FechaModificacion { get; set; }
    public DateTime? FechaFinalizacion { get; set; }
    public List<ArchivoEntregable>? DetalleArchivos {get; set;}
    public List<EntregableDetalleActividad>? DetalleActividades {get; set;}

}
private class EntregableDetalleActividad{
    public int Id {get; set;}

    public string Titulo {get; set;}

    public int Prioridad {get; set;}
}
public class ArchivoEntregable{
    [JsonPropertyName("IdArchivo")]
    public int IdArchivo {get; set;}
}
public class Actividad
    {
        [JsonPropertyName("Id")]
        public int Id;
        [JsonPropertyName("IdEntregable")]
        public int IdEntregable;
        public string Titulo;
        public string Descripcion;
        public DateTime FechaInicio;
        public DateTime FechaFinPrevista;
        public DateTime FechaModificacion;
        public DateTime FechaFinalizacion;
        public int Prioridad;
        public int PorcentajeAvance;
    }  
    public class ActividadDTO{
        public int Id {get; set;}
        public string Titulo;
        public int Prioridad;

    }
    public class ArchivoDTO{
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Tipo { get; set; }
    }
}